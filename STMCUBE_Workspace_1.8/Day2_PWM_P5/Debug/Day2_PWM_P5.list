
Day2_PWM_P5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022f0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080024c8  080024c8  000034c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024d8  080024d8  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080024d8  080024d8  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080024d8  080024d8  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024d8  080024d8  000034d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080024dc  080024dc  000034dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080024e0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  080024ec  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  080024ec  00004078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f64  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001819  00000000  00000000  0000dfa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be8  00000000  00000000  0000f7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000092b  00000000  00000000  000103a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c790  00000000  00000000  00010cd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b74b  00000000  00000000  0002d463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bba36  00000000  00000000  00038bae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f45e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031f4  00000000  00000000  000f4628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000f781c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080024b0 	.word	0x080024b0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080024b0 	.word	0x080024b0

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 f9d3 	bl	80005c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f826 	bl	8000270 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f8be 	bl	80003a4 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000228:	f000 f862 	bl	80002f0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800022c:	210c      	movs	r1, #12
 800022e:	480f      	ldr	r0, [pc, #60]	@ (800026c <main+0x54>)
 8000230:	f001 fac4 	bl	80017bc <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8000234:	4b0d      	ldr	r3, [pc, #52]	@ (800026c <main+0x54>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	2200      	movs	r2, #0
 800023a:	641a      	str	r2, [r3, #64]	@ 0x40
	  HAL_Delay(1000);
 800023c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000240:	f000 fa32 	bl	80006a8 <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 40000);
 8000244:	4b09      	ldr	r3, [pc, #36]	@ (800026c <main+0x54>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	f649 4240 	movw	r2, #40000	@ 0x9c40
 800024c:	641a      	str	r2, [r3, #64]	@ 0x40
	  HAL_Delay(1000);
 800024e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000252:	f000 fa29 	bl	80006a8 <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 65535);
 8000256:	4b05      	ldr	r3, [pc, #20]	@ (800026c <main+0x54>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800025e:	641a      	str	r2, [r3, #64]	@ 0x40
	  HAL_Delay(1000);
 8000260:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000264:	f000 fa20 	bl	80006a8 <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8000268:	bf00      	nop
 800026a:	e7e3      	b.n	8000234 <main+0x1c>
 800026c:	20000028 	.word	0x20000028

08000270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b094      	sub	sp, #80	@ 0x50
 8000274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000276:	f107 0318 	add.w	r3, r7, #24
 800027a:	2238      	movs	r2, #56	@ 0x38
 800027c:	2100      	movs	r1, #0
 800027e:	4618      	mov	r0, r3
 8000280:	f002 f8ea 	bl	8002458 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000284:	1d3b      	adds	r3, r7, #4
 8000286:	2200      	movs	r2, #0
 8000288:	601a      	str	r2, [r3, #0]
 800028a:	605a      	str	r2, [r3, #4]
 800028c:	609a      	str	r2, [r3, #8]
 800028e:	60da      	str	r2, [r3, #12]
 8000290:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000292:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000296:	f000 fc8f 	bl	8000bb8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800029a:	2302      	movs	r3, #2
 800029c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800029e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002a2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002a4:	2340      	movs	r3, #64	@ 0x40
 80002a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002a8:	2300      	movs	r3, #0
 80002aa:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ac:	f107 0318 	add.w	r3, r7, #24
 80002b0:	4618      	mov	r0, r3
 80002b2:	f000 fd35 	bl	8000d20 <HAL_RCC_OscConfig>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002bc:	f000 f896 	bl	80003ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c0:	230f      	movs	r3, #15
 80002c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002c4:	2301      	movs	r3, #1
 80002c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c8:	2300      	movs	r3, #0
 80002ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002cc:	2300      	movs	r3, #0
 80002ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	2100      	movs	r1, #0
 80002d8:	4618      	mov	r0, r3
 80002da:	f001 f833 	bl	8001344 <HAL_RCC_ClockConfig>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80002e4:	f000 f882 	bl	80003ec <Error_Handler>
  }
}
 80002e8:	bf00      	nop
 80002ea:	3750      	adds	r7, #80	@ 0x50
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}

080002f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b08a      	sub	sp, #40	@ 0x28
 80002f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002f6:	f107 031c 	add.w	r3, r7, #28
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
 80002fe:	605a      	str	r2, [r3, #4]
 8000300:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000302:	463b      	mov	r3, r7
 8000304:	2200      	movs	r2, #0
 8000306:	601a      	str	r2, [r3, #0]
 8000308:	605a      	str	r2, [r3, #4]
 800030a:	609a      	str	r2, [r3, #8]
 800030c:	60da      	str	r2, [r3, #12]
 800030e:	611a      	str	r2, [r3, #16]
 8000310:	615a      	str	r2, [r3, #20]
 8000312:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000314:	4b21      	ldr	r3, [pc, #132]	@ (800039c <MX_TIM3_Init+0xac>)
 8000316:	4a22      	ldr	r2, [pc, #136]	@ (80003a0 <MX_TIM3_Init+0xb0>)
 8000318:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800031a:	4b20      	ldr	r3, [pc, #128]	@ (800039c <MX_TIM3_Init+0xac>)
 800031c:	2200      	movs	r2, #0
 800031e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000320:	4b1e      	ldr	r3, [pc, #120]	@ (800039c <MX_TIM3_Init+0xac>)
 8000322:	2200      	movs	r2, #0
 8000324:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000326:	4b1d      	ldr	r3, [pc, #116]	@ (800039c <MX_TIM3_Init+0xac>)
 8000328:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800032c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800032e:	4b1b      	ldr	r3, [pc, #108]	@ (800039c <MX_TIM3_Init+0xac>)
 8000330:	2200      	movs	r2, #0
 8000332:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000334:	4b19      	ldr	r3, [pc, #100]	@ (800039c <MX_TIM3_Init+0xac>)
 8000336:	2200      	movs	r2, #0
 8000338:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800033a:	4818      	ldr	r0, [pc, #96]	@ (800039c <MX_TIM3_Init+0xac>)
 800033c:	f001 f9e6 	bl	800170c <HAL_TIM_PWM_Init>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000346:	f000 f851 	bl	80003ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800034a:	2300      	movs	r3, #0
 800034c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800034e:	2300      	movs	r3, #0
 8000350:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000352:	f107 031c 	add.w	r3, r7, #28
 8000356:	4619      	mov	r1, r3
 8000358:	4810      	ldr	r0, [pc, #64]	@ (800039c <MX_TIM3_Init+0xac>)
 800035a:	f001 fffb 	bl	8002354 <HAL_TIMEx_MasterConfigSynchronization>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000364:	f000 f842 	bl	80003ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000368:	2360      	movs	r3, #96	@ 0x60
 800036a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800036c:	2300      	movs	r3, #0
 800036e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000370:	2300      	movs	r3, #0
 8000372:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000374:	2300      	movs	r3, #0
 8000376:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000378:	463b      	mov	r3, r7
 800037a:	220c      	movs	r2, #12
 800037c:	4619      	mov	r1, r3
 800037e:	4807      	ldr	r0, [pc, #28]	@ (800039c <MX_TIM3_Init+0xac>)
 8000380:	f001 fb1c 	bl	80019bc <HAL_TIM_PWM_ConfigChannel>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800038a:	f000 f82f 	bl	80003ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800038e:	4803      	ldr	r0, [pc, #12]	@ (800039c <MX_TIM3_Init+0xac>)
 8000390:	f000 f876 	bl	8000480 <HAL_TIM_MspPostInit>

}
 8000394:	bf00      	nop
 8000396:	3728      	adds	r7, #40	@ 0x28
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	20000028 	.word	0x20000028
 80003a0:	40000400 	.word	0x40000400

080003a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003aa:	4b0f      	ldr	r3, [pc, #60]	@ (80003e8 <MX_GPIO_Init+0x44>)
 80003ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003ae:	4a0e      	ldr	r2, [pc, #56]	@ (80003e8 <MX_GPIO_Init+0x44>)
 80003b0:	f043 0302 	orr.w	r3, r3, #2
 80003b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003b6:	4b0c      	ldr	r3, [pc, #48]	@ (80003e8 <MX_GPIO_Init+0x44>)
 80003b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003ba:	f003 0302 	and.w	r3, r3, #2
 80003be:	607b      	str	r3, [r7, #4]
 80003c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c2:	4b09      	ldr	r3, [pc, #36]	@ (80003e8 <MX_GPIO_Init+0x44>)
 80003c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003c6:	4a08      	ldr	r2, [pc, #32]	@ (80003e8 <MX_GPIO_Init+0x44>)
 80003c8:	f043 0301 	orr.w	r3, r3, #1
 80003cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003ce:	4b06      	ldr	r3, [pc, #24]	@ (80003e8 <MX_GPIO_Init+0x44>)
 80003d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003d2:	f003 0301 	and.w	r3, r3, #1
 80003d6:	603b      	str	r3, [r7, #0]
 80003d8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003da:	bf00      	nop
 80003dc:	370c      	adds	r7, #12
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	40021000 	.word	0x40021000

080003ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f0:	b672      	cpsid	i
}
 80003f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f4:	bf00      	nop
 80003f6:	e7fd      	b.n	80003f4 <Error_Handler+0x8>

080003f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003fe:	4b0f      	ldr	r3, [pc, #60]	@ (800043c <HAL_MspInit+0x44>)
 8000400:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000402:	4a0e      	ldr	r2, [pc, #56]	@ (800043c <HAL_MspInit+0x44>)
 8000404:	f043 0301 	orr.w	r3, r3, #1
 8000408:	6613      	str	r3, [r2, #96]	@ 0x60
 800040a:	4b0c      	ldr	r3, [pc, #48]	@ (800043c <HAL_MspInit+0x44>)
 800040c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800040e:	f003 0301 	and.w	r3, r3, #1
 8000412:	607b      	str	r3, [r7, #4]
 8000414:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000416:	4b09      	ldr	r3, [pc, #36]	@ (800043c <HAL_MspInit+0x44>)
 8000418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800041a:	4a08      	ldr	r2, [pc, #32]	@ (800043c <HAL_MspInit+0x44>)
 800041c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000420:	6593      	str	r3, [r2, #88]	@ 0x58
 8000422:	4b06      	ldr	r3, [pc, #24]	@ (800043c <HAL_MspInit+0x44>)
 8000424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800042a:	603b      	str	r3, [r7, #0]
 800042c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800042e:	f000 fc67 	bl	8000d00 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000432:	bf00      	nop
 8000434:	3708      	adds	r7, #8
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	40021000 	.word	0x40021000

08000440 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000440:	b480      	push	{r7}
 8000442:	b085      	sub	sp, #20
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a0a      	ldr	r2, [pc, #40]	@ (8000478 <HAL_TIM_PWM_MspInit+0x38>)
 800044e:	4293      	cmp	r3, r2
 8000450:	d10b      	bne.n	800046a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000452:	4b0a      	ldr	r3, [pc, #40]	@ (800047c <HAL_TIM_PWM_MspInit+0x3c>)
 8000454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000456:	4a09      	ldr	r2, [pc, #36]	@ (800047c <HAL_TIM_PWM_MspInit+0x3c>)
 8000458:	f043 0302 	orr.w	r3, r3, #2
 800045c:	6593      	str	r3, [r2, #88]	@ 0x58
 800045e:	4b07      	ldr	r3, [pc, #28]	@ (800047c <HAL_TIM_PWM_MspInit+0x3c>)
 8000460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000462:	f003 0302 	and.w	r3, r3, #2
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800046a:	bf00      	nop
 800046c:	3714      	adds	r7, #20
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	40000400 	.word	0x40000400
 800047c:	40021000 	.word	0x40021000

08000480 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b088      	sub	sp, #32
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000488:	f107 030c 	add.w	r3, r7, #12
 800048c:	2200      	movs	r2, #0
 800048e:	601a      	str	r2, [r3, #0]
 8000490:	605a      	str	r2, [r3, #4]
 8000492:	609a      	str	r2, [r3, #8]
 8000494:	60da      	str	r2, [r3, #12]
 8000496:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a11      	ldr	r2, [pc, #68]	@ (80004e4 <HAL_TIM_MspPostInit+0x64>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d11b      	bne.n	80004da <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004a2:	4b11      	ldr	r3, [pc, #68]	@ (80004e8 <HAL_TIM_MspPostInit+0x68>)
 80004a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004a6:	4a10      	ldr	r2, [pc, #64]	@ (80004e8 <HAL_TIM_MspPostInit+0x68>)
 80004a8:	f043 0302 	orr.w	r3, r3, #2
 80004ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004ae:	4b0e      	ldr	r3, [pc, #56]	@ (80004e8 <HAL_TIM_MspPostInit+0x68>)
 80004b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004b2:	f003 0302 	and.w	r3, r3, #2
 80004b6:	60bb      	str	r3, [r7, #8]
 80004b8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80004ba:	2302      	movs	r3, #2
 80004bc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004be:	2302      	movs	r3, #2
 80004c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c2:	2300      	movs	r3, #0
 80004c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c6:	2300      	movs	r3, #0
 80004c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80004ca:	2302      	movs	r3, #2
 80004cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ce:	f107 030c 	add.w	r3, r7, #12
 80004d2:	4619      	mov	r1, r3
 80004d4:	4805      	ldr	r0, [pc, #20]	@ (80004ec <HAL_TIM_MspPostInit+0x6c>)
 80004d6:	f000 f9ed 	bl	80008b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80004da:	bf00      	nop
 80004dc:	3720      	adds	r7, #32
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40000400 	.word	0x40000400
 80004e8:	40021000 	.word	0x40021000
 80004ec:	48000400 	.word	0x48000400

080004f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004f4:	bf00      	nop
 80004f6:	e7fd      	b.n	80004f4 <NMI_Handler+0x4>

080004f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004fc:	bf00      	nop
 80004fe:	e7fd      	b.n	80004fc <HardFault_Handler+0x4>

08000500 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000504:	bf00      	nop
 8000506:	e7fd      	b.n	8000504 <MemManage_Handler+0x4>

08000508 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800050c:	bf00      	nop
 800050e:	e7fd      	b.n	800050c <BusFault_Handler+0x4>

08000510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000514:	bf00      	nop
 8000516:	e7fd      	b.n	8000514 <UsageFault_Handler+0x4>

08000518 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr

08000526 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000526:	b480      	push	{r7}
 8000528:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800052a:	bf00      	nop
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr

08000534 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr

08000542 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000542:	b580      	push	{r7, lr}
 8000544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000546:	f000 f891 	bl	800066c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800054a:	bf00      	nop
 800054c:	bd80      	pop	{r7, pc}
	...

08000550 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000554:	4b06      	ldr	r3, [pc, #24]	@ (8000570 <SystemInit+0x20>)
 8000556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800055a:	4a05      	ldr	r2, [pc, #20]	@ (8000570 <SystemInit+0x20>)
 800055c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000560:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000564:	bf00      	nop
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	e000ed00 	.word	0xe000ed00

08000574 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000574:	480d      	ldr	r0, [pc, #52]	@ (80005ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000576:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000578:	f7ff ffea 	bl	8000550 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800057c:	480c      	ldr	r0, [pc, #48]	@ (80005b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800057e:	490d      	ldr	r1, [pc, #52]	@ (80005b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000580:	4a0d      	ldr	r2, [pc, #52]	@ (80005b8 <LoopForever+0xe>)
  movs r3, #0
 8000582:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000584:	e002      	b.n	800058c <LoopCopyDataInit>

08000586 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000586:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000588:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800058a:	3304      	adds	r3, #4

0800058c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800058c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800058e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000590:	d3f9      	bcc.n	8000586 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000592:	4a0a      	ldr	r2, [pc, #40]	@ (80005bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000594:	4c0a      	ldr	r4, [pc, #40]	@ (80005c0 <LoopForever+0x16>)
  movs r3, #0
 8000596:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000598:	e001      	b.n	800059e <LoopFillZerobss>

0800059a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800059a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800059c:	3204      	adds	r2, #4

0800059e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800059e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005a0:	d3fb      	bcc.n	800059a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80005a2:	f001 ff61 	bl	8002468 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005a6:	f7ff fe37 	bl	8000218 <main>

080005aa <LoopForever>:

LoopForever:
    b LoopForever
 80005aa:	e7fe      	b.n	80005aa <LoopForever>
  ldr   r0, =_estack
 80005ac:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80005b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005b8:	080024e0 	.word	0x080024e0
  ldr r2, =_sbss
 80005bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005c0:	20000078 	.word	0x20000078

080005c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005c4:	e7fe      	b.n	80005c4 <ADC1_2_IRQHandler>

080005c6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c6:	b580      	push	{r7, lr}
 80005c8:	b082      	sub	sp, #8
 80005ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005cc:	2300      	movs	r3, #0
 80005ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005d0:	2003      	movs	r0, #3
 80005d2:	f000 f93d 	bl	8000850 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005d6:	200f      	movs	r0, #15
 80005d8:	f000 f80e 	bl	80005f8 <HAL_InitTick>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d002      	beq.n	80005e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005e2:	2301      	movs	r3, #1
 80005e4:	71fb      	strb	r3, [r7, #7]
 80005e6:	e001      	b.n	80005ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005e8:	f7ff ff06 	bl	80003f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005ec:	79fb      	ldrb	r3, [r7, #7]

}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000600:	2300      	movs	r3, #0
 8000602:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000604:	4b16      	ldr	r3, [pc, #88]	@ (8000660 <HAL_InitTick+0x68>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d022      	beq.n	8000652 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800060c:	4b15      	ldr	r3, [pc, #84]	@ (8000664 <HAL_InitTick+0x6c>)
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	4b13      	ldr	r3, [pc, #76]	@ (8000660 <HAL_InitTick+0x68>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000618:	fbb1 f3f3 	udiv	r3, r1, r3
 800061c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000620:	4618      	mov	r0, r3
 8000622:	f000 f93a 	bl	800089a <HAL_SYSTICK_Config>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d10f      	bne.n	800064c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	2b0f      	cmp	r3, #15
 8000630:	d809      	bhi.n	8000646 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000632:	2200      	movs	r2, #0
 8000634:	6879      	ldr	r1, [r7, #4]
 8000636:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800063a:	f000 f914 	bl	8000866 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800063e:	4a0a      	ldr	r2, [pc, #40]	@ (8000668 <HAL_InitTick+0x70>)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	6013      	str	r3, [r2, #0]
 8000644:	e007      	b.n	8000656 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000646:	2301      	movs	r3, #1
 8000648:	73fb      	strb	r3, [r7, #15]
 800064a:	e004      	b.n	8000656 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800064c:	2301      	movs	r3, #1
 800064e:	73fb      	strb	r3, [r7, #15]
 8000650:	e001      	b.n	8000656 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000652:	2301      	movs	r3, #1
 8000654:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000656:	7bfb      	ldrb	r3, [r7, #15]
}
 8000658:	4618      	mov	r0, r3
 800065a:	3710      	adds	r7, #16
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000008 	.word	0x20000008
 8000664:	20000000 	.word	0x20000000
 8000668:	20000004 	.word	0x20000004

0800066c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000670:	4b05      	ldr	r3, [pc, #20]	@ (8000688 <HAL_IncTick+0x1c>)
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	4b05      	ldr	r3, [pc, #20]	@ (800068c <HAL_IncTick+0x20>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4413      	add	r3, r2
 800067a:	4a03      	ldr	r2, [pc, #12]	@ (8000688 <HAL_IncTick+0x1c>)
 800067c:	6013      	str	r3, [r2, #0]
}
 800067e:	bf00      	nop
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	20000074 	.word	0x20000074
 800068c:	20000008 	.word	0x20000008

08000690 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  return uwTick;
 8000694:	4b03      	ldr	r3, [pc, #12]	@ (80006a4 <HAL_GetTick+0x14>)
 8000696:	681b      	ldr	r3, [r3, #0]
}
 8000698:	4618      	mov	r0, r3
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	20000074 	.word	0x20000074

080006a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006b0:	f7ff ffee 	bl	8000690 <HAL_GetTick>
 80006b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80006c0:	d004      	beq.n	80006cc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80006c2:	4b09      	ldr	r3, [pc, #36]	@ (80006e8 <HAL_Delay+0x40>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	68fa      	ldr	r2, [r7, #12]
 80006c8:	4413      	add	r3, r2
 80006ca:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006cc:	bf00      	nop
 80006ce:	f7ff ffdf 	bl	8000690 <HAL_GetTick>
 80006d2:	4602      	mov	r2, r0
 80006d4:	68bb      	ldr	r3, [r7, #8]
 80006d6:	1ad3      	subs	r3, r2, r3
 80006d8:	68fa      	ldr	r2, [r7, #12]
 80006da:	429a      	cmp	r2, r3
 80006dc:	d8f7      	bhi.n	80006ce <HAL_Delay+0x26>
  {
  }
}
 80006de:	bf00      	nop
 80006e0:	bf00      	nop
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000008 	.word	0x20000008

080006ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	f003 0307 	and.w	r3, r3, #7
 80006fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000730 <__NVIC_SetPriorityGrouping+0x44>)
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000702:	68ba      	ldr	r2, [r7, #8]
 8000704:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000708:	4013      	ands	r3, r2
 800070a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000714:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000718:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800071c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800071e:	4a04      	ldr	r2, [pc, #16]	@ (8000730 <__NVIC_SetPriorityGrouping+0x44>)
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	60d3      	str	r3, [r2, #12]
}
 8000724:	bf00      	nop
 8000726:	3714      	adds	r7, #20
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr
 8000730:	e000ed00 	.word	0xe000ed00

08000734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000738:	4b04      	ldr	r3, [pc, #16]	@ (800074c <__NVIC_GetPriorityGrouping+0x18>)
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	0a1b      	lsrs	r3, r3, #8
 800073e:	f003 0307 	and.w	r3, r3, #7
}
 8000742:	4618      	mov	r0, r3
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	e000ed00 	.word	0xe000ed00

08000750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	6039      	str	r1, [r7, #0]
 800075a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800075c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000760:	2b00      	cmp	r3, #0
 8000762:	db0a      	blt.n	800077a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	b2da      	uxtb	r2, r3
 8000768:	490c      	ldr	r1, [pc, #48]	@ (800079c <__NVIC_SetPriority+0x4c>)
 800076a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076e:	0112      	lsls	r2, r2, #4
 8000770:	b2d2      	uxtb	r2, r2
 8000772:	440b      	add	r3, r1
 8000774:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000778:	e00a      	b.n	8000790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	b2da      	uxtb	r2, r3
 800077e:	4908      	ldr	r1, [pc, #32]	@ (80007a0 <__NVIC_SetPriority+0x50>)
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	f003 030f 	and.w	r3, r3, #15
 8000786:	3b04      	subs	r3, #4
 8000788:	0112      	lsls	r2, r2, #4
 800078a:	b2d2      	uxtb	r2, r2
 800078c:	440b      	add	r3, r1
 800078e:	761a      	strb	r2, [r3, #24]
}
 8000790:	bf00      	nop
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	e000e100 	.word	0xe000e100
 80007a0:	e000ed00 	.word	0xe000ed00

080007a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b089      	sub	sp, #36	@ 0x24
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	f003 0307 	and.w	r3, r3, #7
 80007b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b8:	69fb      	ldr	r3, [r7, #28]
 80007ba:	f1c3 0307 	rsb	r3, r3, #7
 80007be:	2b04      	cmp	r3, #4
 80007c0:	bf28      	it	cs
 80007c2:	2304      	movcs	r3, #4
 80007c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	3304      	adds	r3, #4
 80007ca:	2b06      	cmp	r3, #6
 80007cc:	d902      	bls.n	80007d4 <NVIC_EncodePriority+0x30>
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	3b03      	subs	r3, #3
 80007d2:	e000      	b.n	80007d6 <NVIC_EncodePriority+0x32>
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80007dc:	69bb      	ldr	r3, [r7, #24]
 80007de:	fa02 f303 	lsl.w	r3, r2, r3
 80007e2:	43da      	mvns	r2, r3
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	401a      	ands	r2, r3
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	fa01 f303 	lsl.w	r3, r1, r3
 80007f6:	43d9      	mvns	r1, r3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007fc:	4313      	orrs	r3, r2
         );
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3724      	adds	r7, #36	@ 0x24
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
	...

0800080c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	3b01      	subs	r3, #1
 8000818:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800081c:	d301      	bcc.n	8000822 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800081e:	2301      	movs	r3, #1
 8000820:	e00f      	b.n	8000842 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000822:	4a0a      	ldr	r2, [pc, #40]	@ (800084c <SysTick_Config+0x40>)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	3b01      	subs	r3, #1
 8000828:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800082a:	210f      	movs	r1, #15
 800082c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000830:	f7ff ff8e 	bl	8000750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000834:	4b05      	ldr	r3, [pc, #20]	@ (800084c <SysTick_Config+0x40>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800083a:	4b04      	ldr	r3, [pc, #16]	@ (800084c <SysTick_Config+0x40>)
 800083c:	2207      	movs	r2, #7
 800083e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000840:	2300      	movs	r3, #0
}
 8000842:	4618      	mov	r0, r3
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	e000e010 	.word	0xe000e010

08000850 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f7ff ff47 	bl	80006ec <__NVIC_SetPriorityGrouping>
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	b086      	sub	sp, #24
 800086a:	af00      	add	r7, sp, #0
 800086c:	4603      	mov	r3, r0
 800086e:	60b9      	str	r1, [r7, #8]
 8000870:	607a      	str	r2, [r7, #4]
 8000872:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000874:	f7ff ff5e 	bl	8000734 <__NVIC_GetPriorityGrouping>
 8000878:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	68b9      	ldr	r1, [r7, #8]
 800087e:	6978      	ldr	r0, [r7, #20]
 8000880:	f7ff ff90 	bl	80007a4 <NVIC_EncodePriority>
 8000884:	4602      	mov	r2, r0
 8000886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800088a:	4611      	mov	r1, r2
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff ff5f 	bl	8000750 <__NVIC_SetPriority>
}
 8000892:	bf00      	nop
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b082      	sub	sp, #8
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f7ff ffb2 	bl	800080c <SysTick_Config>
 80008a8:	4603      	mov	r3, r0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b087      	sub	sp, #28
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80008c2:	e15a      	b.n	8000b7a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	2101      	movs	r1, #1
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	fa01 f303 	lsl.w	r3, r1, r3
 80008d0:	4013      	ands	r3, r2
 80008d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	f000 814c 	beq.w	8000b74 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	f003 0303 	and.w	r3, r3, #3
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d005      	beq.n	80008f4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80008f0:	2b02      	cmp	r3, #2
 80008f2:	d130      	bne.n	8000956 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	689b      	ldr	r3, [r3, #8]
 80008f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	2203      	movs	r2, #3
 8000900:	fa02 f303 	lsl.w	r3, r2, r3
 8000904:	43db      	mvns	r3, r3
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	4013      	ands	r3, r2
 800090a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	68da      	ldr	r2, [r3, #12]
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	fa02 f303 	lsl.w	r3, r2, r3
 8000918:	693a      	ldr	r2, [r7, #16]
 800091a:	4313      	orrs	r3, r2
 800091c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	693a      	ldr	r2, [r7, #16]
 8000922:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800092a:	2201      	movs	r2, #1
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	fa02 f303 	lsl.w	r3, r2, r3
 8000932:	43db      	mvns	r3, r3
 8000934:	693a      	ldr	r2, [r7, #16]
 8000936:	4013      	ands	r3, r2
 8000938:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	091b      	lsrs	r3, r3, #4
 8000940:	f003 0201 	and.w	r2, r3, #1
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	fa02 f303 	lsl.w	r3, r2, r3
 800094a:	693a      	ldr	r2, [r7, #16]
 800094c:	4313      	orrs	r3, r2
 800094e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	693a      	ldr	r2, [r7, #16]
 8000954:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	f003 0303 	and.w	r3, r3, #3
 800095e:	2b03      	cmp	r3, #3
 8000960:	d017      	beq.n	8000992 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	68db      	ldr	r3, [r3, #12]
 8000966:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	2203      	movs	r2, #3
 800096e:	fa02 f303 	lsl.w	r3, r2, r3
 8000972:	43db      	mvns	r3, r3
 8000974:	693a      	ldr	r2, [r7, #16]
 8000976:	4013      	ands	r3, r2
 8000978:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	689a      	ldr	r2, [r3, #8]
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	fa02 f303 	lsl.w	r3, r2, r3
 8000986:	693a      	ldr	r2, [r7, #16]
 8000988:	4313      	orrs	r3, r2
 800098a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	f003 0303 	and.w	r3, r3, #3
 800099a:	2b02      	cmp	r3, #2
 800099c:	d123      	bne.n	80009e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	08da      	lsrs	r2, r3, #3
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	3208      	adds	r2, #8
 80009a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	f003 0307 	and.w	r3, r3, #7
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	220f      	movs	r2, #15
 80009b6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ba:	43db      	mvns	r3, r3
 80009bc:	693a      	ldr	r2, [r7, #16]
 80009be:	4013      	ands	r3, r2
 80009c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	691a      	ldr	r2, [r3, #16]
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	f003 0307 	and.w	r3, r3, #7
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	08da      	lsrs	r2, r3, #3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	3208      	adds	r2, #8
 80009e0:	6939      	ldr	r1, [r7, #16]
 80009e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	2203      	movs	r2, #3
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	43db      	mvns	r3, r3
 80009f8:	693a      	ldr	r2, [r7, #16]
 80009fa:	4013      	ands	r3, r2
 80009fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	f003 0203 	and.w	r2, r3, #3
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	f000 80a6 	beq.w	8000b74 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a28:	4b5b      	ldr	r3, [pc, #364]	@ (8000b98 <HAL_GPIO_Init+0x2e4>)
 8000a2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a2c:	4a5a      	ldr	r2, [pc, #360]	@ (8000b98 <HAL_GPIO_Init+0x2e4>)
 8000a2e:	f043 0301 	orr.w	r3, r3, #1
 8000a32:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a34:	4b58      	ldr	r3, [pc, #352]	@ (8000b98 <HAL_GPIO_Init+0x2e4>)
 8000a36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a38:	f003 0301 	and.w	r3, r3, #1
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a40:	4a56      	ldr	r2, [pc, #344]	@ (8000b9c <HAL_GPIO_Init+0x2e8>)
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	089b      	lsrs	r3, r3, #2
 8000a46:	3302      	adds	r3, #2
 8000a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	f003 0303 	and.w	r3, r3, #3
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	220f      	movs	r2, #15
 8000a58:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5c:	43db      	mvns	r3, r3
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	4013      	ands	r3, r2
 8000a62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000a6a:	d01f      	beq.n	8000aac <HAL_GPIO_Init+0x1f8>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	4a4c      	ldr	r2, [pc, #304]	@ (8000ba0 <HAL_GPIO_Init+0x2ec>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d019      	beq.n	8000aa8 <HAL_GPIO_Init+0x1f4>
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4a4b      	ldr	r2, [pc, #300]	@ (8000ba4 <HAL_GPIO_Init+0x2f0>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d013      	beq.n	8000aa4 <HAL_GPIO_Init+0x1f0>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4a4a      	ldr	r2, [pc, #296]	@ (8000ba8 <HAL_GPIO_Init+0x2f4>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d00d      	beq.n	8000aa0 <HAL_GPIO_Init+0x1ec>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a49      	ldr	r2, [pc, #292]	@ (8000bac <HAL_GPIO_Init+0x2f8>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d007      	beq.n	8000a9c <HAL_GPIO_Init+0x1e8>
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4a48      	ldr	r2, [pc, #288]	@ (8000bb0 <HAL_GPIO_Init+0x2fc>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d101      	bne.n	8000a98 <HAL_GPIO_Init+0x1e4>
 8000a94:	2305      	movs	r3, #5
 8000a96:	e00a      	b.n	8000aae <HAL_GPIO_Init+0x1fa>
 8000a98:	2306      	movs	r3, #6
 8000a9a:	e008      	b.n	8000aae <HAL_GPIO_Init+0x1fa>
 8000a9c:	2304      	movs	r3, #4
 8000a9e:	e006      	b.n	8000aae <HAL_GPIO_Init+0x1fa>
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	e004      	b.n	8000aae <HAL_GPIO_Init+0x1fa>
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	e002      	b.n	8000aae <HAL_GPIO_Init+0x1fa>
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	e000      	b.n	8000aae <HAL_GPIO_Init+0x1fa>
 8000aac:	2300      	movs	r3, #0
 8000aae:	697a      	ldr	r2, [r7, #20]
 8000ab0:	f002 0203 	and.w	r2, r2, #3
 8000ab4:	0092      	lsls	r2, r2, #2
 8000ab6:	4093      	lsls	r3, r2
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000abe:	4937      	ldr	r1, [pc, #220]	@ (8000b9c <HAL_GPIO_Init+0x2e8>)
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	089b      	lsrs	r3, r3, #2
 8000ac4:	3302      	adds	r3, #2
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000acc:	4b39      	ldr	r3, [pc, #228]	@ (8000bb4 <HAL_GPIO_Init+0x300>)
 8000ace:	689b      	ldr	r3, [r3, #8]
 8000ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	43db      	mvns	r3, r3
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	4013      	ands	r3, r2
 8000ada:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d003      	beq.n	8000af0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000ae8:	693a      	ldr	r2, [r7, #16]
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000af0:	4a30      	ldr	r2, [pc, #192]	@ (8000bb4 <HAL_GPIO_Init+0x300>)
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000af6:	4b2f      	ldr	r3, [pc, #188]	@ (8000bb4 <HAL_GPIO_Init+0x300>)
 8000af8:	68db      	ldr	r3, [r3, #12]
 8000afa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	43db      	mvns	r3, r3
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	4013      	ands	r3, r2
 8000b04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d003      	beq.n	8000b1a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	4313      	orrs	r3, r2
 8000b18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b1a:	4a26      	ldr	r2, [pc, #152]	@ (8000bb4 <HAL_GPIO_Init+0x300>)
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000b20:	4b24      	ldr	r3, [pc, #144]	@ (8000bb4 <HAL_GPIO_Init+0x300>)
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	43db      	mvns	r3, r3
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d003      	beq.n	8000b44 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000b3c:	693a      	ldr	r2, [r7, #16]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b44:	4a1b      	ldr	r2, [pc, #108]	@ (8000bb4 <HAL_GPIO_Init+0x300>)
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000b4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000bb4 <HAL_GPIO_Init+0x300>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	43db      	mvns	r3, r3
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	4013      	ands	r3, r2
 8000b58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d003      	beq.n	8000b6e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b6e:	4a11      	ldr	r2, [pc, #68]	@ (8000bb4 <HAL_GPIO_Init+0x300>)
 8000b70:	693b      	ldr	r3, [r7, #16]
 8000b72:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	3301      	adds	r3, #1
 8000b78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	fa22 f303 	lsr.w	r3, r2, r3
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	f47f ae9d 	bne.w	80008c4 <HAL_GPIO_Init+0x10>
  }
}
 8000b8a:	bf00      	nop
 8000b8c:	bf00      	nop
 8000b8e:	371c      	adds	r7, #28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	40010000 	.word	0x40010000
 8000ba0:	48000400 	.word	0x48000400
 8000ba4:	48000800 	.word	0x48000800
 8000ba8:	48000c00 	.word	0x48000c00
 8000bac:	48001000 	.word	0x48001000
 8000bb0:	48001400 	.word	0x48001400
 8000bb4:	40010400 	.word	0x40010400

08000bb8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d141      	bne.n	8000c4a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000bc6:	4b4b      	ldr	r3, [pc, #300]	@ (8000cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000bce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000bd2:	d131      	bne.n	8000c38 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000bd4:	4b47      	ldr	r3, [pc, #284]	@ (8000cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000bda:	4a46      	ldr	r2, [pc, #280]	@ (8000cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000be0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000be4:	4b43      	ldr	r3, [pc, #268]	@ (8000cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000bec:	4a41      	ldr	r2, [pc, #260]	@ (8000cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bf2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000bf4:	4b40      	ldr	r3, [pc, #256]	@ (8000cf8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2232      	movs	r2, #50	@ 0x32
 8000bfa:	fb02 f303 	mul.w	r3, r2, r3
 8000bfe:	4a3f      	ldr	r2, [pc, #252]	@ (8000cfc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000c00:	fba2 2303 	umull	r2, r3, r2, r3
 8000c04:	0c9b      	lsrs	r3, r3, #18
 8000c06:	3301      	adds	r3, #1
 8000c08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c0a:	e002      	b.n	8000c12 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c12:	4b38      	ldr	r3, [pc, #224]	@ (8000cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c14:	695b      	ldr	r3, [r3, #20]
 8000c16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c1e:	d102      	bne.n	8000c26 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d1f2      	bne.n	8000c0c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c26:	4b33      	ldr	r3, [pc, #204]	@ (8000cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c32:	d158      	bne.n	8000ce6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000c34:	2303      	movs	r3, #3
 8000c36:	e057      	b.n	8000ce8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000c38:	4b2e      	ldr	r3, [pc, #184]	@ (8000cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000c3e:	4a2d      	ldr	r2, [pc, #180]	@ (8000cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000c44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000c48:	e04d      	b.n	8000ce6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000c50:	d141      	bne.n	8000cd6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c52:	4b28      	ldr	r3, [pc, #160]	@ (8000cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000c5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c5e:	d131      	bne.n	8000cc4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000c60:	4b24      	ldr	r3, [pc, #144]	@ (8000cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000c66:	4a23      	ldr	r2, [pc, #140]	@ (8000cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c6c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c70:	4b20      	ldr	r3, [pc, #128]	@ (8000cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000c78:	4a1e      	ldr	r2, [pc, #120]	@ (8000cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c7e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c80:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2232      	movs	r2, #50	@ 0x32
 8000c86:	fb02 f303 	mul.w	r3, r2, r3
 8000c8a:	4a1c      	ldr	r2, [pc, #112]	@ (8000cfc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c90:	0c9b      	lsrs	r3, r3, #18
 8000c92:	3301      	adds	r3, #1
 8000c94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c96:	e002      	b.n	8000c9e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c9e:	4b15      	ldr	r3, [pc, #84]	@ (8000cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ca0:	695b      	ldr	r3, [r3, #20]
 8000ca2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ca6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000caa:	d102      	bne.n	8000cb2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d1f2      	bne.n	8000c98 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000cb2:	4b10      	ldr	r3, [pc, #64]	@ (8000cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cb4:	695b      	ldr	r3, [r3, #20]
 8000cb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000cba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000cbe:	d112      	bne.n	8000ce6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	e011      	b.n	8000ce8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000cca:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ccc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cd0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8000cd4:	e007      	b.n	8000ce6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cd6:	4b07      	ldr	r3, [pc, #28]	@ (8000cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000cde:	4a05      	ldr	r2, [pc, #20]	@ (8000cf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ce0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ce4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000ce6:	2300      	movs	r3, #0
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3714      	adds	r7, #20
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	40007000 	.word	0x40007000
 8000cf8:	20000000 	.word	0x20000000
 8000cfc:	431bde83 	.word	0x431bde83

08000d00 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000d04:	4b05      	ldr	r3, [pc, #20]	@ (8000d1c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	4a04      	ldr	r2, [pc, #16]	@ (8000d1c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000d0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d0e:	6093      	str	r3, [r2, #8]
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	40007000 	.word	0x40007000

08000d20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b088      	sub	sp, #32
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d101      	bne.n	8000d32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e2fe      	b.n	8001330 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d075      	beq.n	8000e2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d3e:	4b97      	ldr	r3, [pc, #604]	@ (8000f9c <HAL_RCC_OscConfig+0x27c>)
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	f003 030c 	and.w	r3, r3, #12
 8000d46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d48:	4b94      	ldr	r3, [pc, #592]	@ (8000f9c <HAL_RCC_OscConfig+0x27c>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	f003 0303 	and.w	r3, r3, #3
 8000d50:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	2b0c      	cmp	r3, #12
 8000d56:	d102      	bne.n	8000d5e <HAL_RCC_OscConfig+0x3e>
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	2b03      	cmp	r3, #3
 8000d5c:	d002      	beq.n	8000d64 <HAL_RCC_OscConfig+0x44>
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	2b08      	cmp	r3, #8
 8000d62:	d10b      	bne.n	8000d7c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d64:	4b8d      	ldr	r3, [pc, #564]	@ (8000f9c <HAL_RCC_OscConfig+0x27c>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d05b      	beq.n	8000e28 <HAL_RCC_OscConfig+0x108>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d157      	bne.n	8000e28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e2d9      	b.n	8001330 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d84:	d106      	bne.n	8000d94 <HAL_RCC_OscConfig+0x74>
 8000d86:	4b85      	ldr	r3, [pc, #532]	@ (8000f9c <HAL_RCC_OscConfig+0x27c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a84      	ldr	r2, [pc, #528]	@ (8000f9c <HAL_RCC_OscConfig+0x27c>)
 8000d8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d90:	6013      	str	r3, [r2, #0]
 8000d92:	e01d      	b.n	8000dd0 <HAL_RCC_OscConfig+0xb0>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d9c:	d10c      	bne.n	8000db8 <HAL_RCC_OscConfig+0x98>
 8000d9e:	4b7f      	ldr	r3, [pc, #508]	@ (8000f9c <HAL_RCC_OscConfig+0x27c>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a7e      	ldr	r2, [pc, #504]	@ (8000f9c <HAL_RCC_OscConfig+0x27c>)
 8000da4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000da8:	6013      	str	r3, [r2, #0]
 8000daa:	4b7c      	ldr	r3, [pc, #496]	@ (8000f9c <HAL_RCC_OscConfig+0x27c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a7b      	ldr	r2, [pc, #492]	@ (8000f9c <HAL_RCC_OscConfig+0x27c>)
 8000db0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000db4:	6013      	str	r3, [r2, #0]
 8000db6:	e00b      	b.n	8000dd0 <HAL_RCC_OscConfig+0xb0>
 8000db8:	4b78      	ldr	r3, [pc, #480]	@ (8000f9c <HAL_RCC_OscConfig+0x27c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a77      	ldr	r2, [pc, #476]	@ (8000f9c <HAL_RCC_OscConfig+0x27c>)
 8000dbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000dc2:	6013      	str	r3, [r2, #0]
 8000dc4:	4b75      	ldr	r3, [pc, #468]	@ (8000f9c <HAL_RCC_OscConfig+0x27c>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a74      	ldr	r2, [pc, #464]	@ (8000f9c <HAL_RCC_OscConfig+0x27c>)
 8000dca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000dce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d013      	beq.n	8000e00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dd8:	f7ff fc5a 	bl	8000690 <HAL_GetTick>
 8000ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000dde:	e008      	b.n	8000df2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000de0:	f7ff fc56 	bl	8000690 <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	2b64      	cmp	r3, #100	@ 0x64
 8000dec:	d901      	bls.n	8000df2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000dee:	2303      	movs	r3, #3
 8000df0:	e29e      	b.n	8001330 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000df2:	4b6a      	ldr	r3, [pc, #424]	@ (8000f9c <HAL_RCC_OscConfig+0x27c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d0f0      	beq.n	8000de0 <HAL_RCC_OscConfig+0xc0>
 8000dfe:	e014      	b.n	8000e2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e00:	f7ff fc46 	bl	8000690 <HAL_GetTick>
 8000e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e06:	e008      	b.n	8000e1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e08:	f7ff fc42 	bl	8000690 <HAL_GetTick>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	2b64      	cmp	r3, #100	@ 0x64
 8000e14:	d901      	bls.n	8000e1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000e16:	2303      	movs	r3, #3
 8000e18:	e28a      	b.n	8001330 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e1a:	4b60      	ldr	r3, [pc, #384]	@ (8000f9c <HAL_RCC_OscConfig+0x27c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d1f0      	bne.n	8000e08 <HAL_RCC_OscConfig+0xe8>
 8000e26:	e000      	b.n	8000e2a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f003 0302 	and.w	r3, r3, #2
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d075      	beq.n	8000f22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e36:	4b59      	ldr	r3, [pc, #356]	@ (8000f9c <HAL_RCC_OscConfig+0x27c>)
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	f003 030c 	and.w	r3, r3, #12
 8000e3e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e40:	4b56      	ldr	r3, [pc, #344]	@ (8000f9c <HAL_RCC_OscConfig+0x27c>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	f003 0303 	and.w	r3, r3, #3
 8000e48:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	2b0c      	cmp	r3, #12
 8000e4e:	d102      	bne.n	8000e56 <HAL_RCC_OscConfig+0x136>
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d002      	beq.n	8000e5c <HAL_RCC_OscConfig+0x13c>
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	2b04      	cmp	r3, #4
 8000e5a:	d11f      	bne.n	8000e9c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e5c:	4b4f      	ldr	r3, [pc, #316]	@ (8000f9c <HAL_RCC_OscConfig+0x27c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d005      	beq.n	8000e74 <HAL_RCC_OscConfig+0x154>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d101      	bne.n	8000e74 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e25d      	b.n	8001330 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e74:	4b49      	ldr	r3, [pc, #292]	@ (8000f9c <HAL_RCC_OscConfig+0x27c>)
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	691b      	ldr	r3, [r3, #16]
 8000e80:	061b      	lsls	r3, r3, #24
 8000e82:	4946      	ldr	r1, [pc, #280]	@ (8000f9c <HAL_RCC_OscConfig+0x27c>)
 8000e84:	4313      	orrs	r3, r2
 8000e86:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000e88:	4b45      	ldr	r3, [pc, #276]	@ (8000fa0 <HAL_RCC_OscConfig+0x280>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fbb3 	bl	80005f8 <HAL_InitTick>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d043      	beq.n	8000f20 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e249      	b.n	8001330 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d023      	beq.n	8000eec <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ea4:	4b3d      	ldr	r3, [pc, #244]	@ (8000f9c <HAL_RCC_OscConfig+0x27c>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a3c      	ldr	r2, [pc, #240]	@ (8000f9c <HAL_RCC_OscConfig+0x27c>)
 8000eaa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000eb0:	f7ff fbee 	bl	8000690 <HAL_GetTick>
 8000eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000eb6:	e008      	b.n	8000eca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eb8:	f7ff fbea 	bl	8000690 <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	2b02      	cmp	r3, #2
 8000ec4:	d901      	bls.n	8000eca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e232      	b.n	8001330 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000eca:	4b34      	ldr	r3, [pc, #208]	@ (8000f9c <HAL_RCC_OscConfig+0x27c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d0f0      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ed6:	4b31      	ldr	r3, [pc, #196]	@ (8000f9c <HAL_RCC_OscConfig+0x27c>)
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	691b      	ldr	r3, [r3, #16]
 8000ee2:	061b      	lsls	r3, r3, #24
 8000ee4:	492d      	ldr	r1, [pc, #180]	@ (8000f9c <HAL_RCC_OscConfig+0x27c>)
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	604b      	str	r3, [r1, #4]
 8000eea:	e01a      	b.n	8000f22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000eec:	4b2b      	ldr	r3, [pc, #172]	@ (8000f9c <HAL_RCC_OscConfig+0x27c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a2a      	ldr	r2, [pc, #168]	@ (8000f9c <HAL_RCC_OscConfig+0x27c>)
 8000ef2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ef8:	f7ff fbca 	bl	8000690 <HAL_GetTick>
 8000efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000efe:	e008      	b.n	8000f12 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f00:	f7ff fbc6 	bl	8000690 <HAL_GetTick>
 8000f04:	4602      	mov	r2, r0
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d901      	bls.n	8000f12 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	e20e      	b.n	8001330 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000f12:	4b22      	ldr	r3, [pc, #136]	@ (8000f9c <HAL_RCC_OscConfig+0x27c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d1f0      	bne.n	8000f00 <HAL_RCC_OscConfig+0x1e0>
 8000f1e:	e000      	b.n	8000f22 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f20:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f003 0308 	and.w	r3, r3, #8
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d041      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	695b      	ldr	r3, [r3, #20]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d01c      	beq.n	8000f70 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f36:	4b19      	ldr	r3, [pc, #100]	@ (8000f9c <HAL_RCC_OscConfig+0x27c>)
 8000f38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f3c:	4a17      	ldr	r2, [pc, #92]	@ (8000f9c <HAL_RCC_OscConfig+0x27c>)
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f46:	f7ff fba3 	bl	8000690 <HAL_GetTick>
 8000f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f4c:	e008      	b.n	8000f60 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f4e:	f7ff fb9f 	bl	8000690 <HAL_GetTick>
 8000f52:	4602      	mov	r2, r0
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d901      	bls.n	8000f60 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	e1e7      	b.n	8001330 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f60:	4b0e      	ldr	r3, [pc, #56]	@ (8000f9c <HAL_RCC_OscConfig+0x27c>)
 8000f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d0ef      	beq.n	8000f4e <HAL_RCC_OscConfig+0x22e>
 8000f6e:	e020      	b.n	8000fb2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f70:	4b0a      	ldr	r3, [pc, #40]	@ (8000f9c <HAL_RCC_OscConfig+0x27c>)
 8000f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f76:	4a09      	ldr	r2, [pc, #36]	@ (8000f9c <HAL_RCC_OscConfig+0x27c>)
 8000f78:	f023 0301 	bic.w	r3, r3, #1
 8000f7c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f80:	f7ff fb86 	bl	8000690 <HAL_GetTick>
 8000f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f86:	e00d      	b.n	8000fa4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f88:	f7ff fb82 	bl	8000690 <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d906      	bls.n	8000fa4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	e1ca      	b.n	8001330 <HAL_RCC_OscConfig+0x610>
 8000f9a:	bf00      	nop
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000fa4:	4b8c      	ldr	r3, [pc, #560]	@ (80011d8 <HAL_RCC_OscConfig+0x4b8>)
 8000fa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d1ea      	bne.n	8000f88 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f003 0304 	and.w	r3, r3, #4
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	f000 80a6 	beq.w	800110c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000fc4:	4b84      	ldr	r3, [pc, #528]	@ (80011d8 <HAL_RCC_OscConfig+0x4b8>)
 8000fc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d101      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x2b4>
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e000      	b.n	8000fd6 <HAL_RCC_OscConfig+0x2b6>
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d00d      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fda:	4b7f      	ldr	r3, [pc, #508]	@ (80011d8 <HAL_RCC_OscConfig+0x4b8>)
 8000fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fde:	4a7e      	ldr	r2, [pc, #504]	@ (80011d8 <HAL_RCC_OscConfig+0x4b8>)
 8000fe0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fe4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fe6:	4b7c      	ldr	r3, [pc, #496]	@ (80011d8 <HAL_RCC_OscConfig+0x4b8>)
 8000fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ff6:	4b79      	ldr	r3, [pc, #484]	@ (80011dc <HAL_RCC_OscConfig+0x4bc>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d118      	bne.n	8001034 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001002:	4b76      	ldr	r3, [pc, #472]	@ (80011dc <HAL_RCC_OscConfig+0x4bc>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a75      	ldr	r2, [pc, #468]	@ (80011dc <HAL_RCC_OscConfig+0x4bc>)
 8001008:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800100c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800100e:	f7ff fb3f 	bl	8000690 <HAL_GetTick>
 8001012:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001014:	e008      	b.n	8001028 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001016:	f7ff fb3b 	bl	8000690 <HAL_GetTick>
 800101a:	4602      	mov	r2, r0
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	2b02      	cmp	r3, #2
 8001022:	d901      	bls.n	8001028 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001024:	2303      	movs	r3, #3
 8001026:	e183      	b.n	8001330 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001028:	4b6c      	ldr	r3, [pc, #432]	@ (80011dc <HAL_RCC_OscConfig+0x4bc>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001030:	2b00      	cmp	r3, #0
 8001032:	d0f0      	beq.n	8001016 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d108      	bne.n	800104e <HAL_RCC_OscConfig+0x32e>
 800103c:	4b66      	ldr	r3, [pc, #408]	@ (80011d8 <HAL_RCC_OscConfig+0x4b8>)
 800103e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001042:	4a65      	ldr	r2, [pc, #404]	@ (80011d8 <HAL_RCC_OscConfig+0x4b8>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800104c:	e024      	b.n	8001098 <HAL_RCC_OscConfig+0x378>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	2b05      	cmp	r3, #5
 8001054:	d110      	bne.n	8001078 <HAL_RCC_OscConfig+0x358>
 8001056:	4b60      	ldr	r3, [pc, #384]	@ (80011d8 <HAL_RCC_OscConfig+0x4b8>)
 8001058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800105c:	4a5e      	ldr	r2, [pc, #376]	@ (80011d8 <HAL_RCC_OscConfig+0x4b8>)
 800105e:	f043 0304 	orr.w	r3, r3, #4
 8001062:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001066:	4b5c      	ldr	r3, [pc, #368]	@ (80011d8 <HAL_RCC_OscConfig+0x4b8>)
 8001068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800106c:	4a5a      	ldr	r2, [pc, #360]	@ (80011d8 <HAL_RCC_OscConfig+0x4b8>)
 800106e:	f043 0301 	orr.w	r3, r3, #1
 8001072:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001076:	e00f      	b.n	8001098 <HAL_RCC_OscConfig+0x378>
 8001078:	4b57      	ldr	r3, [pc, #348]	@ (80011d8 <HAL_RCC_OscConfig+0x4b8>)
 800107a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800107e:	4a56      	ldr	r2, [pc, #344]	@ (80011d8 <HAL_RCC_OscConfig+0x4b8>)
 8001080:	f023 0301 	bic.w	r3, r3, #1
 8001084:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001088:	4b53      	ldr	r3, [pc, #332]	@ (80011d8 <HAL_RCC_OscConfig+0x4b8>)
 800108a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800108e:	4a52      	ldr	r2, [pc, #328]	@ (80011d8 <HAL_RCC_OscConfig+0x4b8>)
 8001090:	f023 0304 	bic.w	r3, r3, #4
 8001094:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d016      	beq.n	80010ce <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010a0:	f7ff faf6 	bl	8000690 <HAL_GetTick>
 80010a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80010a6:	e00a      	b.n	80010be <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010a8:	f7ff faf2 	bl	8000690 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d901      	bls.n	80010be <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e138      	b.n	8001330 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80010be:	4b46      	ldr	r3, [pc, #280]	@ (80011d8 <HAL_RCC_OscConfig+0x4b8>)
 80010c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010c4:	f003 0302 	and.w	r3, r3, #2
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d0ed      	beq.n	80010a8 <HAL_RCC_OscConfig+0x388>
 80010cc:	e015      	b.n	80010fa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010ce:	f7ff fadf 	bl	8000690 <HAL_GetTick>
 80010d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80010d4:	e00a      	b.n	80010ec <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010d6:	f7ff fadb 	bl	8000690 <HAL_GetTick>
 80010da:	4602      	mov	r2, r0
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d901      	bls.n	80010ec <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80010e8:	2303      	movs	r3, #3
 80010ea:	e121      	b.n	8001330 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80010ec:	4b3a      	ldr	r3, [pc, #232]	@ (80011d8 <HAL_RCC_OscConfig+0x4b8>)
 80010ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1ed      	bne.n	80010d6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80010fa:	7ffb      	ldrb	r3, [r7, #31]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d105      	bne.n	800110c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001100:	4b35      	ldr	r3, [pc, #212]	@ (80011d8 <HAL_RCC_OscConfig+0x4b8>)
 8001102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001104:	4a34      	ldr	r2, [pc, #208]	@ (80011d8 <HAL_RCC_OscConfig+0x4b8>)
 8001106:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800110a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0320 	and.w	r3, r3, #32
 8001114:	2b00      	cmp	r3, #0
 8001116:	d03c      	beq.n	8001192 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d01c      	beq.n	800115a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001120:	4b2d      	ldr	r3, [pc, #180]	@ (80011d8 <HAL_RCC_OscConfig+0x4b8>)
 8001122:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001126:	4a2c      	ldr	r2, [pc, #176]	@ (80011d8 <HAL_RCC_OscConfig+0x4b8>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001130:	f7ff faae 	bl	8000690 <HAL_GetTick>
 8001134:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001136:	e008      	b.n	800114a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001138:	f7ff faaa 	bl	8000690 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b02      	cmp	r3, #2
 8001144:	d901      	bls.n	800114a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e0f2      	b.n	8001330 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800114a:	4b23      	ldr	r3, [pc, #140]	@ (80011d8 <HAL_RCC_OscConfig+0x4b8>)
 800114c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001150:	f003 0302 	and.w	r3, r3, #2
 8001154:	2b00      	cmp	r3, #0
 8001156:	d0ef      	beq.n	8001138 <HAL_RCC_OscConfig+0x418>
 8001158:	e01b      	b.n	8001192 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800115a:	4b1f      	ldr	r3, [pc, #124]	@ (80011d8 <HAL_RCC_OscConfig+0x4b8>)
 800115c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001160:	4a1d      	ldr	r2, [pc, #116]	@ (80011d8 <HAL_RCC_OscConfig+0x4b8>)
 8001162:	f023 0301 	bic.w	r3, r3, #1
 8001166:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800116a:	f7ff fa91 	bl	8000690 <HAL_GetTick>
 800116e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001170:	e008      	b.n	8001184 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001172:	f7ff fa8d 	bl	8000690 <HAL_GetTick>
 8001176:	4602      	mov	r2, r0
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d901      	bls.n	8001184 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	e0d5      	b.n	8001330 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001184:	4b14      	ldr	r3, [pc, #80]	@ (80011d8 <HAL_RCC_OscConfig+0x4b8>)
 8001186:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d1ef      	bne.n	8001172 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	2b00      	cmp	r3, #0
 8001198:	f000 80c9 	beq.w	800132e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800119c:	4b0e      	ldr	r3, [pc, #56]	@ (80011d8 <HAL_RCC_OscConfig+0x4b8>)
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	f003 030c 	and.w	r3, r3, #12
 80011a4:	2b0c      	cmp	r3, #12
 80011a6:	f000 8083 	beq.w	80012b0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d15e      	bne.n	8001270 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011b2:	4b09      	ldr	r3, [pc, #36]	@ (80011d8 <HAL_RCC_OscConfig+0x4b8>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a08      	ldr	r2, [pc, #32]	@ (80011d8 <HAL_RCC_OscConfig+0x4b8>)
 80011b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80011bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011be:	f7ff fa67 	bl	8000690 <HAL_GetTick>
 80011c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011c4:	e00c      	b.n	80011e0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011c6:	f7ff fa63 	bl	8000690 <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d905      	bls.n	80011e0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	e0ab      	b.n	8001330 <HAL_RCC_OscConfig+0x610>
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011e0:	4b55      	ldr	r3, [pc, #340]	@ (8001338 <HAL_RCC_OscConfig+0x618>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1ec      	bne.n	80011c6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011ec:	4b52      	ldr	r3, [pc, #328]	@ (8001338 <HAL_RCC_OscConfig+0x618>)
 80011ee:	68da      	ldr	r2, [r3, #12]
 80011f0:	4b52      	ldr	r3, [pc, #328]	@ (800133c <HAL_RCC_OscConfig+0x61c>)
 80011f2:	4013      	ands	r3, r2
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	6a11      	ldr	r1, [r2, #32]
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80011fc:	3a01      	subs	r2, #1
 80011fe:	0112      	lsls	r2, r2, #4
 8001200:	4311      	orrs	r1, r2
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001206:	0212      	lsls	r2, r2, #8
 8001208:	4311      	orrs	r1, r2
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800120e:	0852      	lsrs	r2, r2, #1
 8001210:	3a01      	subs	r2, #1
 8001212:	0552      	lsls	r2, r2, #21
 8001214:	4311      	orrs	r1, r2
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800121a:	0852      	lsrs	r2, r2, #1
 800121c:	3a01      	subs	r2, #1
 800121e:	0652      	lsls	r2, r2, #25
 8001220:	4311      	orrs	r1, r2
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001226:	06d2      	lsls	r2, r2, #27
 8001228:	430a      	orrs	r2, r1
 800122a:	4943      	ldr	r1, [pc, #268]	@ (8001338 <HAL_RCC_OscConfig+0x618>)
 800122c:	4313      	orrs	r3, r2
 800122e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001230:	4b41      	ldr	r3, [pc, #260]	@ (8001338 <HAL_RCC_OscConfig+0x618>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a40      	ldr	r2, [pc, #256]	@ (8001338 <HAL_RCC_OscConfig+0x618>)
 8001236:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800123a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800123c:	4b3e      	ldr	r3, [pc, #248]	@ (8001338 <HAL_RCC_OscConfig+0x618>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	4a3d      	ldr	r2, [pc, #244]	@ (8001338 <HAL_RCC_OscConfig+0x618>)
 8001242:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001246:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001248:	f7ff fa22 	bl	8000690 <HAL_GetTick>
 800124c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800124e:	e008      	b.n	8001262 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001250:	f7ff fa1e 	bl	8000690 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b02      	cmp	r3, #2
 800125c:	d901      	bls.n	8001262 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e066      	b.n	8001330 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001262:	4b35      	ldr	r3, [pc, #212]	@ (8001338 <HAL_RCC_OscConfig+0x618>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d0f0      	beq.n	8001250 <HAL_RCC_OscConfig+0x530>
 800126e:	e05e      	b.n	800132e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001270:	4b31      	ldr	r3, [pc, #196]	@ (8001338 <HAL_RCC_OscConfig+0x618>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a30      	ldr	r2, [pc, #192]	@ (8001338 <HAL_RCC_OscConfig+0x618>)
 8001276:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800127a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800127c:	f7ff fa08 	bl	8000690 <HAL_GetTick>
 8001280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001282:	e008      	b.n	8001296 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001284:	f7ff fa04 	bl	8000690 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e04c      	b.n	8001330 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001296:	4b28      	ldr	r3, [pc, #160]	@ (8001338 <HAL_RCC_OscConfig+0x618>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1f0      	bne.n	8001284 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80012a2:	4b25      	ldr	r3, [pc, #148]	@ (8001338 <HAL_RCC_OscConfig+0x618>)
 80012a4:	68da      	ldr	r2, [r3, #12]
 80012a6:	4924      	ldr	r1, [pc, #144]	@ (8001338 <HAL_RCC_OscConfig+0x618>)
 80012a8:	4b25      	ldr	r3, [pc, #148]	@ (8001340 <HAL_RCC_OscConfig+0x620>)
 80012aa:	4013      	ands	r3, r2
 80012ac:	60cb      	str	r3, [r1, #12]
 80012ae:	e03e      	b.n	800132e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	69db      	ldr	r3, [r3, #28]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d101      	bne.n	80012bc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e039      	b.n	8001330 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80012bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001338 <HAL_RCC_OscConfig+0x618>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	f003 0203 	and.w	r2, r3, #3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a1b      	ldr	r3, [r3, #32]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d12c      	bne.n	800132a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012da:	3b01      	subs	r3, #1
 80012dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012de:	429a      	cmp	r2, r3
 80012e0:	d123      	bne.n	800132a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d11b      	bne.n	800132a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012fc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80012fe:	429a      	cmp	r2, r3
 8001300:	d113      	bne.n	800132a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130c:	085b      	lsrs	r3, r3, #1
 800130e:	3b01      	subs	r3, #1
 8001310:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001312:	429a      	cmp	r2, r3
 8001314:	d109      	bne.n	800132a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001320:	085b      	lsrs	r3, r3, #1
 8001322:	3b01      	subs	r3, #1
 8001324:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001326:	429a      	cmp	r2, r3
 8001328:	d001      	beq.n	800132e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e000      	b.n	8001330 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800132e:	2300      	movs	r3, #0
}
 8001330:	4618      	mov	r0, r3
 8001332:	3720      	adds	r7, #32
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40021000 	.word	0x40021000
 800133c:	019f800c 	.word	0x019f800c
 8001340:	feeefffc 	.word	0xfeeefffc

08001344 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d101      	bne.n	800135c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e11e      	b.n	800159a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800135c:	4b91      	ldr	r3, [pc, #580]	@ (80015a4 <HAL_RCC_ClockConfig+0x260>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 030f 	and.w	r3, r3, #15
 8001364:	683a      	ldr	r2, [r7, #0]
 8001366:	429a      	cmp	r2, r3
 8001368:	d910      	bls.n	800138c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800136a:	4b8e      	ldr	r3, [pc, #568]	@ (80015a4 <HAL_RCC_ClockConfig+0x260>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f023 020f 	bic.w	r2, r3, #15
 8001372:	498c      	ldr	r1, [pc, #560]	@ (80015a4 <HAL_RCC_ClockConfig+0x260>)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	4313      	orrs	r3, r2
 8001378:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800137a:	4b8a      	ldr	r3, [pc, #552]	@ (80015a4 <HAL_RCC_ClockConfig+0x260>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 030f 	and.w	r3, r3, #15
 8001382:	683a      	ldr	r2, [r7, #0]
 8001384:	429a      	cmp	r2, r3
 8001386:	d001      	beq.n	800138c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e106      	b.n	800159a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	2b00      	cmp	r3, #0
 8001396:	d073      	beq.n	8001480 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	2b03      	cmp	r3, #3
 800139e:	d129      	bne.n	80013f4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013a0:	4b81      	ldr	r3, [pc, #516]	@ (80015a8 <HAL_RCC_ClockConfig+0x264>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d101      	bne.n	80013b0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e0f4      	b.n	800159a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80013b0:	f000 f966 	bl	8001680 <RCC_GetSysClockFreqFromPLLSource>
 80013b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	4a7c      	ldr	r2, [pc, #496]	@ (80015ac <HAL_RCC_ClockConfig+0x268>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d93f      	bls.n	800143e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80013be:	4b7a      	ldr	r3, [pc, #488]	@ (80015a8 <HAL_RCC_ClockConfig+0x264>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d009      	beq.n	80013de <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d033      	beq.n	800143e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d12f      	bne.n	800143e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80013de:	4b72      	ldr	r3, [pc, #456]	@ (80015a8 <HAL_RCC_ClockConfig+0x264>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80013e6:	4a70      	ldr	r2, [pc, #448]	@ (80015a8 <HAL_RCC_ClockConfig+0x264>)
 80013e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013ec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80013ee:	2380      	movs	r3, #128	@ 0x80
 80013f0:	617b      	str	r3, [r7, #20]
 80013f2:	e024      	b.n	800143e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d107      	bne.n	800140c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013fc:	4b6a      	ldr	r3, [pc, #424]	@ (80015a8 <HAL_RCC_ClockConfig+0x264>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d109      	bne.n	800141c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e0c6      	b.n	800159a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800140c:	4b66      	ldr	r3, [pc, #408]	@ (80015a8 <HAL_RCC_ClockConfig+0x264>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001414:	2b00      	cmp	r3, #0
 8001416:	d101      	bne.n	800141c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e0be      	b.n	800159a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800141c:	f000 f8ce 	bl	80015bc <HAL_RCC_GetSysClockFreq>
 8001420:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	4a61      	ldr	r2, [pc, #388]	@ (80015ac <HAL_RCC_ClockConfig+0x268>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d909      	bls.n	800143e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800142a:	4b5f      	ldr	r3, [pc, #380]	@ (80015a8 <HAL_RCC_ClockConfig+0x264>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001432:	4a5d      	ldr	r2, [pc, #372]	@ (80015a8 <HAL_RCC_ClockConfig+0x264>)
 8001434:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001438:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800143a:	2380      	movs	r3, #128	@ 0x80
 800143c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800143e:	4b5a      	ldr	r3, [pc, #360]	@ (80015a8 <HAL_RCC_ClockConfig+0x264>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f023 0203 	bic.w	r2, r3, #3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	4957      	ldr	r1, [pc, #348]	@ (80015a8 <HAL_RCC_ClockConfig+0x264>)
 800144c:	4313      	orrs	r3, r2
 800144e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001450:	f7ff f91e 	bl	8000690 <HAL_GetTick>
 8001454:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001456:	e00a      	b.n	800146e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001458:	f7ff f91a 	bl	8000690 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001466:	4293      	cmp	r3, r2
 8001468:	d901      	bls.n	800146e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e095      	b.n	800159a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800146e:	4b4e      	ldr	r3, [pc, #312]	@ (80015a8 <HAL_RCC_ClockConfig+0x264>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	f003 020c 	and.w	r2, r3, #12
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	429a      	cmp	r2, r3
 800147e:	d1eb      	bne.n	8001458 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d023      	beq.n	80014d4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0304 	and.w	r3, r3, #4
 8001494:	2b00      	cmp	r3, #0
 8001496:	d005      	beq.n	80014a4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001498:	4b43      	ldr	r3, [pc, #268]	@ (80015a8 <HAL_RCC_ClockConfig+0x264>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	4a42      	ldr	r2, [pc, #264]	@ (80015a8 <HAL_RCC_ClockConfig+0x264>)
 800149e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80014a2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0308 	and.w	r3, r3, #8
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d007      	beq.n	80014c0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80014b0:	4b3d      	ldr	r3, [pc, #244]	@ (80015a8 <HAL_RCC_ClockConfig+0x264>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80014b8:	4a3b      	ldr	r2, [pc, #236]	@ (80015a8 <HAL_RCC_ClockConfig+0x264>)
 80014ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80014be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014c0:	4b39      	ldr	r3, [pc, #228]	@ (80015a8 <HAL_RCC_ClockConfig+0x264>)
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	4936      	ldr	r1, [pc, #216]	@ (80015a8 <HAL_RCC_ClockConfig+0x264>)
 80014ce:	4313      	orrs	r3, r2
 80014d0:	608b      	str	r3, [r1, #8]
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	2b80      	cmp	r3, #128	@ 0x80
 80014d8:	d105      	bne.n	80014e6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80014da:	4b33      	ldr	r3, [pc, #204]	@ (80015a8 <HAL_RCC_ClockConfig+0x264>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	4a32      	ldr	r2, [pc, #200]	@ (80015a8 <HAL_RCC_ClockConfig+0x264>)
 80014e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80014e4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014e6:	4b2f      	ldr	r3, [pc, #188]	@ (80015a4 <HAL_RCC_ClockConfig+0x260>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 030f 	and.w	r3, r3, #15
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d21d      	bcs.n	8001530 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014f4:	4b2b      	ldr	r3, [pc, #172]	@ (80015a4 <HAL_RCC_ClockConfig+0x260>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f023 020f 	bic.w	r2, r3, #15
 80014fc:	4929      	ldr	r1, [pc, #164]	@ (80015a4 <HAL_RCC_ClockConfig+0x260>)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	4313      	orrs	r3, r2
 8001502:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001504:	f7ff f8c4 	bl	8000690 <HAL_GetTick>
 8001508:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800150a:	e00a      	b.n	8001522 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800150c:	f7ff f8c0 	bl	8000690 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	f241 3288 	movw	r2, #5000	@ 0x1388
 800151a:	4293      	cmp	r3, r2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e03b      	b.n	800159a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001522:	4b20      	ldr	r3, [pc, #128]	@ (80015a4 <HAL_RCC_ClockConfig+0x260>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 030f 	and.w	r3, r3, #15
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	429a      	cmp	r2, r3
 800152e:	d1ed      	bne.n	800150c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0304 	and.w	r3, r3, #4
 8001538:	2b00      	cmp	r3, #0
 800153a:	d008      	beq.n	800154e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800153c:	4b1a      	ldr	r3, [pc, #104]	@ (80015a8 <HAL_RCC_ClockConfig+0x264>)
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	4917      	ldr	r1, [pc, #92]	@ (80015a8 <HAL_RCC_ClockConfig+0x264>)
 800154a:	4313      	orrs	r3, r2
 800154c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0308 	and.w	r3, r3, #8
 8001556:	2b00      	cmp	r3, #0
 8001558:	d009      	beq.n	800156e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800155a:	4b13      	ldr	r3, [pc, #76]	@ (80015a8 <HAL_RCC_ClockConfig+0x264>)
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	490f      	ldr	r1, [pc, #60]	@ (80015a8 <HAL_RCC_ClockConfig+0x264>)
 800156a:	4313      	orrs	r3, r2
 800156c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800156e:	f000 f825 	bl	80015bc <HAL_RCC_GetSysClockFreq>
 8001572:	4602      	mov	r2, r0
 8001574:	4b0c      	ldr	r3, [pc, #48]	@ (80015a8 <HAL_RCC_ClockConfig+0x264>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	091b      	lsrs	r3, r3, #4
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	490c      	ldr	r1, [pc, #48]	@ (80015b0 <HAL_RCC_ClockConfig+0x26c>)
 8001580:	5ccb      	ldrb	r3, [r1, r3]
 8001582:	f003 031f 	and.w	r3, r3, #31
 8001586:	fa22 f303 	lsr.w	r3, r2, r3
 800158a:	4a0a      	ldr	r2, [pc, #40]	@ (80015b4 <HAL_RCC_ClockConfig+0x270>)
 800158c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800158e:	4b0a      	ldr	r3, [pc, #40]	@ (80015b8 <HAL_RCC_ClockConfig+0x274>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff f830 	bl	80005f8 <HAL_InitTick>
 8001598:	4603      	mov	r3, r0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3718      	adds	r7, #24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40022000 	.word	0x40022000
 80015a8:	40021000 	.word	0x40021000
 80015ac:	04c4b400 	.word	0x04c4b400
 80015b0:	080024c8 	.word	0x080024c8
 80015b4:	20000000 	.word	0x20000000
 80015b8:	20000004 	.word	0x20000004

080015bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	b087      	sub	sp, #28
 80015c0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80015c2:	4b2c      	ldr	r3, [pc, #176]	@ (8001674 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f003 030c 	and.w	r3, r3, #12
 80015ca:	2b04      	cmp	r3, #4
 80015cc:	d102      	bne.n	80015d4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80015ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001678 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015d0:	613b      	str	r3, [r7, #16]
 80015d2:	e047      	b.n	8001664 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80015d4:	4b27      	ldr	r3, [pc, #156]	@ (8001674 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f003 030c 	and.w	r3, r3, #12
 80015dc:	2b08      	cmp	r3, #8
 80015de:	d102      	bne.n	80015e6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80015e0:	4b26      	ldr	r3, [pc, #152]	@ (800167c <HAL_RCC_GetSysClockFreq+0xc0>)
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	e03e      	b.n	8001664 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80015e6:	4b23      	ldr	r3, [pc, #140]	@ (8001674 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f003 030c 	and.w	r3, r3, #12
 80015ee:	2b0c      	cmp	r3, #12
 80015f0:	d136      	bne.n	8001660 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80015f2:	4b20      	ldr	r3, [pc, #128]	@ (8001674 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	f003 0303 	and.w	r3, r3, #3
 80015fa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80015fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001674 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	091b      	lsrs	r3, r3, #4
 8001602:	f003 030f 	and.w	r3, r3, #15
 8001606:	3301      	adds	r3, #1
 8001608:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2b03      	cmp	r3, #3
 800160e:	d10c      	bne.n	800162a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001610:	4a1a      	ldr	r2, [pc, #104]	@ (800167c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	fbb2 f3f3 	udiv	r3, r2, r3
 8001618:	4a16      	ldr	r2, [pc, #88]	@ (8001674 <HAL_RCC_GetSysClockFreq+0xb8>)
 800161a:	68d2      	ldr	r2, [r2, #12]
 800161c:	0a12      	lsrs	r2, r2, #8
 800161e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001622:	fb02 f303 	mul.w	r3, r2, r3
 8001626:	617b      	str	r3, [r7, #20]
      break;
 8001628:	e00c      	b.n	8001644 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800162a:	4a13      	ldr	r2, [pc, #76]	@ (8001678 <HAL_RCC_GetSysClockFreq+0xbc>)
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001632:	4a10      	ldr	r2, [pc, #64]	@ (8001674 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001634:	68d2      	ldr	r2, [r2, #12]
 8001636:	0a12      	lsrs	r2, r2, #8
 8001638:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800163c:	fb02 f303 	mul.w	r3, r2, r3
 8001640:	617b      	str	r3, [r7, #20]
      break;
 8001642:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001644:	4b0b      	ldr	r3, [pc, #44]	@ (8001674 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	0e5b      	lsrs	r3, r3, #25
 800164a:	f003 0303 	and.w	r3, r3, #3
 800164e:	3301      	adds	r3, #1
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001654:	697a      	ldr	r2, [r7, #20]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	fbb2 f3f3 	udiv	r3, r2, r3
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	e001      	b.n	8001664 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001660:	2300      	movs	r3, #0
 8001662:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001664:	693b      	ldr	r3, [r7, #16]
}
 8001666:	4618      	mov	r0, r3
 8001668:	371c      	adds	r7, #28
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	40021000 	.word	0x40021000
 8001678:	00f42400 	.word	0x00f42400
 800167c:	007a1200 	.word	0x007a1200

08001680 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001680:	b480      	push	{r7}
 8001682:	b087      	sub	sp, #28
 8001684:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001686:	4b1e      	ldr	r3, [pc, #120]	@ (8001700 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	f003 0303 	and.w	r3, r3, #3
 800168e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001690:	4b1b      	ldr	r3, [pc, #108]	@ (8001700 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	091b      	lsrs	r3, r3, #4
 8001696:	f003 030f 	and.w	r3, r3, #15
 800169a:	3301      	adds	r3, #1
 800169c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	2b03      	cmp	r3, #3
 80016a2:	d10c      	bne.n	80016be <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80016a4:	4a17      	ldr	r2, [pc, #92]	@ (8001704 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ac:	4a14      	ldr	r2, [pc, #80]	@ (8001700 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80016ae:	68d2      	ldr	r2, [r2, #12]
 80016b0:	0a12      	lsrs	r2, r2, #8
 80016b2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80016b6:	fb02 f303 	mul.w	r3, r2, r3
 80016ba:	617b      	str	r3, [r7, #20]
    break;
 80016bc:	e00c      	b.n	80016d8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80016be:	4a12      	ldr	r2, [pc, #72]	@ (8001708 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001700 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80016c8:	68d2      	ldr	r2, [r2, #12]
 80016ca:	0a12      	lsrs	r2, r2, #8
 80016cc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80016d0:	fb02 f303 	mul.w	r3, r2, r3
 80016d4:	617b      	str	r3, [r7, #20]
    break;
 80016d6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80016d8:	4b09      	ldr	r3, [pc, #36]	@ (8001700 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	0e5b      	lsrs	r3, r3, #25
 80016de:	f003 0303 	and.w	r3, r3, #3
 80016e2:	3301      	adds	r3, #1
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80016f2:	687b      	ldr	r3, [r7, #4]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	371c      	adds	r7, #28
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	40021000 	.word	0x40021000
 8001704:	007a1200 	.word	0x007a1200
 8001708:	00f42400 	.word	0x00f42400

0800170c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e049      	b.n	80017b2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	d106      	bne.n	8001738 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7fe fe84 	bl	8000440 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2202      	movs	r2, #2
 800173c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3304      	adds	r3, #4
 8001748:	4619      	mov	r1, r3
 800174a:	4610      	mov	r0, r2
 800174c:	f000 fa4a 	bl	8001be4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2201      	movs	r2, #1
 8001754:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2201      	movs	r2, #1
 800175c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2201      	movs	r2, #1
 8001774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2201      	movs	r2, #1
 800177c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2201      	movs	r2, #1
 8001784:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2201      	movs	r2, #1
 800178c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2201      	movs	r2, #1
 8001794:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2201      	movs	r2, #1
 800179c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2201      	movs	r2, #1
 80017a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d109      	bne.n	80017e0 <HAL_TIM_PWM_Start+0x24>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	bf14      	ite	ne
 80017d8:	2301      	movne	r3, #1
 80017da:	2300      	moveq	r3, #0
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	e03c      	b.n	800185a <HAL_TIM_PWM_Start+0x9e>
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	2b04      	cmp	r3, #4
 80017e4:	d109      	bne.n	80017fa <HAL_TIM_PWM_Start+0x3e>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	bf14      	ite	ne
 80017f2:	2301      	movne	r3, #1
 80017f4:	2300      	moveq	r3, #0
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	e02f      	b.n	800185a <HAL_TIM_PWM_Start+0x9e>
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	2b08      	cmp	r3, #8
 80017fe:	d109      	bne.n	8001814 <HAL_TIM_PWM_Start+0x58>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001806:	b2db      	uxtb	r3, r3
 8001808:	2b01      	cmp	r3, #1
 800180a:	bf14      	ite	ne
 800180c:	2301      	movne	r3, #1
 800180e:	2300      	moveq	r3, #0
 8001810:	b2db      	uxtb	r3, r3
 8001812:	e022      	b.n	800185a <HAL_TIM_PWM_Start+0x9e>
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	2b0c      	cmp	r3, #12
 8001818:	d109      	bne.n	800182e <HAL_TIM_PWM_Start+0x72>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b01      	cmp	r3, #1
 8001824:	bf14      	ite	ne
 8001826:	2301      	movne	r3, #1
 8001828:	2300      	moveq	r3, #0
 800182a:	b2db      	uxtb	r3, r3
 800182c:	e015      	b.n	800185a <HAL_TIM_PWM_Start+0x9e>
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	2b10      	cmp	r3, #16
 8001832:	d109      	bne.n	8001848 <HAL_TIM_PWM_Start+0x8c>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2b01      	cmp	r3, #1
 800183e:	bf14      	ite	ne
 8001840:	2301      	movne	r3, #1
 8001842:	2300      	moveq	r3, #0
 8001844:	b2db      	uxtb	r3, r3
 8001846:	e008      	b.n	800185a <HAL_TIM_PWM_Start+0x9e>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800184e:	b2db      	uxtb	r3, r3
 8001850:	2b01      	cmp	r3, #1
 8001852:	bf14      	ite	ne
 8001854:	2301      	movne	r3, #1
 8001856:	2300      	moveq	r3, #0
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e097      	b.n	8001992 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d104      	bne.n	8001872 <HAL_TIM_PWM_Start+0xb6>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2202      	movs	r2, #2
 800186c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001870:	e023      	b.n	80018ba <HAL_TIM_PWM_Start+0xfe>
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	2b04      	cmp	r3, #4
 8001876:	d104      	bne.n	8001882 <HAL_TIM_PWM_Start+0xc6>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2202      	movs	r2, #2
 800187c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001880:	e01b      	b.n	80018ba <HAL_TIM_PWM_Start+0xfe>
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	2b08      	cmp	r3, #8
 8001886:	d104      	bne.n	8001892 <HAL_TIM_PWM_Start+0xd6>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2202      	movs	r2, #2
 800188c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001890:	e013      	b.n	80018ba <HAL_TIM_PWM_Start+0xfe>
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	2b0c      	cmp	r3, #12
 8001896:	d104      	bne.n	80018a2 <HAL_TIM_PWM_Start+0xe6>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2202      	movs	r2, #2
 800189c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80018a0:	e00b      	b.n	80018ba <HAL_TIM_PWM_Start+0xfe>
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	2b10      	cmp	r3, #16
 80018a6:	d104      	bne.n	80018b2 <HAL_TIM_PWM_Start+0xf6>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2202      	movs	r2, #2
 80018ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80018b0:	e003      	b.n	80018ba <HAL_TIM_PWM_Start+0xfe>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2202      	movs	r2, #2
 80018b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2201      	movs	r2, #1
 80018c0:	6839      	ldr	r1, [r7, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f000 fd20 	bl	8002308 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a33      	ldr	r2, [pc, #204]	@ (800199c <HAL_TIM_PWM_Start+0x1e0>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d013      	beq.n	80018fa <HAL_TIM_PWM_Start+0x13e>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a32      	ldr	r2, [pc, #200]	@ (80019a0 <HAL_TIM_PWM_Start+0x1e4>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d00e      	beq.n	80018fa <HAL_TIM_PWM_Start+0x13e>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a30      	ldr	r2, [pc, #192]	@ (80019a4 <HAL_TIM_PWM_Start+0x1e8>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d009      	beq.n	80018fa <HAL_TIM_PWM_Start+0x13e>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a2f      	ldr	r2, [pc, #188]	@ (80019a8 <HAL_TIM_PWM_Start+0x1ec>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d004      	beq.n	80018fa <HAL_TIM_PWM_Start+0x13e>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a2d      	ldr	r2, [pc, #180]	@ (80019ac <HAL_TIM_PWM_Start+0x1f0>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d101      	bne.n	80018fe <HAL_TIM_PWM_Start+0x142>
 80018fa:	2301      	movs	r3, #1
 80018fc:	e000      	b.n	8001900 <HAL_TIM_PWM_Start+0x144>
 80018fe:	2300      	movs	r3, #0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d007      	beq.n	8001914 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001912:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a20      	ldr	r2, [pc, #128]	@ (800199c <HAL_TIM_PWM_Start+0x1e0>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d018      	beq.n	8001950 <HAL_TIM_PWM_Start+0x194>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001926:	d013      	beq.n	8001950 <HAL_TIM_PWM_Start+0x194>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a20      	ldr	r2, [pc, #128]	@ (80019b0 <HAL_TIM_PWM_Start+0x1f4>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d00e      	beq.n	8001950 <HAL_TIM_PWM_Start+0x194>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a1f      	ldr	r2, [pc, #124]	@ (80019b4 <HAL_TIM_PWM_Start+0x1f8>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d009      	beq.n	8001950 <HAL_TIM_PWM_Start+0x194>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a17      	ldr	r2, [pc, #92]	@ (80019a0 <HAL_TIM_PWM_Start+0x1e4>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d004      	beq.n	8001950 <HAL_TIM_PWM_Start+0x194>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a16      	ldr	r2, [pc, #88]	@ (80019a4 <HAL_TIM_PWM_Start+0x1e8>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d115      	bne.n	800197c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	689a      	ldr	r2, [r3, #8]
 8001956:	4b18      	ldr	r3, [pc, #96]	@ (80019b8 <HAL_TIM_PWM_Start+0x1fc>)
 8001958:	4013      	ands	r3, r2
 800195a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2b06      	cmp	r3, #6
 8001960:	d015      	beq.n	800198e <HAL_TIM_PWM_Start+0x1d2>
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001968:	d011      	beq.n	800198e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f042 0201 	orr.w	r2, r2, #1
 8001978:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800197a:	e008      	b.n	800198e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f042 0201 	orr.w	r2, r2, #1
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	e000      	b.n	8001990 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800198e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40012c00 	.word	0x40012c00
 80019a0:	40013400 	.word	0x40013400
 80019a4:	40014000 	.word	0x40014000
 80019a8:	40014400 	.word	0x40014400
 80019ac:	40014800 	.word	0x40014800
 80019b0:	40000400 	.word	0x40000400
 80019b4:	40000800 	.word	0x40000800
 80019b8:	00010007 	.word	0x00010007

080019bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019c8:	2300      	movs	r3, #0
 80019ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d101      	bne.n	80019da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80019d6:	2302      	movs	r3, #2
 80019d8:	e0ff      	b.n	8001bda <HAL_TIM_PWM_ConfigChannel+0x21e>
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2201      	movs	r2, #1
 80019de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2b14      	cmp	r3, #20
 80019e6:	f200 80f0 	bhi.w	8001bca <HAL_TIM_PWM_ConfigChannel+0x20e>
 80019ea:	a201      	add	r2, pc, #4	@ (adr r2, 80019f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80019ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f0:	08001a45 	.word	0x08001a45
 80019f4:	08001bcb 	.word	0x08001bcb
 80019f8:	08001bcb 	.word	0x08001bcb
 80019fc:	08001bcb 	.word	0x08001bcb
 8001a00:	08001a85 	.word	0x08001a85
 8001a04:	08001bcb 	.word	0x08001bcb
 8001a08:	08001bcb 	.word	0x08001bcb
 8001a0c:	08001bcb 	.word	0x08001bcb
 8001a10:	08001ac7 	.word	0x08001ac7
 8001a14:	08001bcb 	.word	0x08001bcb
 8001a18:	08001bcb 	.word	0x08001bcb
 8001a1c:	08001bcb 	.word	0x08001bcb
 8001a20:	08001b07 	.word	0x08001b07
 8001a24:	08001bcb 	.word	0x08001bcb
 8001a28:	08001bcb 	.word	0x08001bcb
 8001a2c:	08001bcb 	.word	0x08001bcb
 8001a30:	08001b49 	.word	0x08001b49
 8001a34:	08001bcb 	.word	0x08001bcb
 8001a38:	08001bcb 	.word	0x08001bcb
 8001a3c:	08001bcb 	.word	0x08001bcb
 8001a40:	08001b89 	.word	0x08001b89
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	68b9      	ldr	r1, [r7, #8]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f000 f966 	bl	8001d1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	699a      	ldr	r2, [r3, #24]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f042 0208 	orr.w	r2, r2, #8
 8001a5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	699a      	ldr	r2, [r3, #24]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f022 0204 	bic.w	r2, r2, #4
 8001a6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6999      	ldr	r1, [r3, #24]
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	691a      	ldr	r2, [r3, #16]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	619a      	str	r2, [r3, #24]
      break;
 8001a82:	e0a5      	b.n	8001bd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68b9      	ldr	r1, [r7, #8]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f000 f9d6 	bl	8001e3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	699a      	ldr	r2, [r3, #24]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	699a      	ldr	r2, [r3, #24]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001aae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6999      	ldr	r1, [r3, #24]
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	021a      	lsls	r2, r3, #8
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	619a      	str	r2, [r3, #24]
      break;
 8001ac4:	e084      	b.n	8001bd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	68b9      	ldr	r1, [r7, #8]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f000 fa3f 	bl	8001f50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	69da      	ldr	r2, [r3, #28]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f042 0208 	orr.w	r2, r2, #8
 8001ae0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	69da      	ldr	r2, [r3, #28]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 0204 	bic.w	r2, r2, #4
 8001af0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	69d9      	ldr	r1, [r3, #28]
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	691a      	ldr	r2, [r3, #16]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	61da      	str	r2, [r3, #28]
      break;
 8001b04:	e064      	b.n	8001bd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68b9      	ldr	r1, [r7, #8]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f000 faa7 	bl	8002060 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	69da      	ldr	r2, [r3, #28]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	69da      	ldr	r2, [r3, #28]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	69d9      	ldr	r1, [r3, #28]
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	021a      	lsls	r2, r3, #8
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	430a      	orrs	r2, r1
 8001b44:	61da      	str	r2, [r3, #28]
      break;
 8001b46:	e043      	b.n	8001bd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	68b9      	ldr	r1, [r7, #8]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f000 fb10 	bl	8002174 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f042 0208 	orr.w	r2, r2, #8
 8001b62:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 0204 	bic.w	r2, r2, #4
 8001b72:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	691a      	ldr	r2, [r3, #16]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	430a      	orrs	r2, r1
 8001b84:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8001b86:	e023      	b.n	8001bd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	68b9      	ldr	r1, [r7, #8]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f000 fb54 	bl	800223c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ba2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001bb2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	021a      	lsls	r2, r3, #8
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8001bc8:	e002      	b.n	8001bd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	75fb      	strb	r3, [r7, #23]
      break;
 8001bce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001bd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop

08001be4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a42      	ldr	r2, [pc, #264]	@ (8001d00 <TIM_Base_SetConfig+0x11c>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d00f      	beq.n	8001c1c <TIM_Base_SetConfig+0x38>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c02:	d00b      	beq.n	8001c1c <TIM_Base_SetConfig+0x38>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a3f      	ldr	r2, [pc, #252]	@ (8001d04 <TIM_Base_SetConfig+0x120>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d007      	beq.n	8001c1c <TIM_Base_SetConfig+0x38>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a3e      	ldr	r2, [pc, #248]	@ (8001d08 <TIM_Base_SetConfig+0x124>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d003      	beq.n	8001c1c <TIM_Base_SetConfig+0x38>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a3d      	ldr	r2, [pc, #244]	@ (8001d0c <TIM_Base_SetConfig+0x128>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d108      	bne.n	8001c2e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a33      	ldr	r2, [pc, #204]	@ (8001d00 <TIM_Base_SetConfig+0x11c>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d01b      	beq.n	8001c6e <TIM_Base_SetConfig+0x8a>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c3c:	d017      	beq.n	8001c6e <TIM_Base_SetConfig+0x8a>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a30      	ldr	r2, [pc, #192]	@ (8001d04 <TIM_Base_SetConfig+0x120>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d013      	beq.n	8001c6e <TIM_Base_SetConfig+0x8a>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a2f      	ldr	r2, [pc, #188]	@ (8001d08 <TIM_Base_SetConfig+0x124>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d00f      	beq.n	8001c6e <TIM_Base_SetConfig+0x8a>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a2e      	ldr	r2, [pc, #184]	@ (8001d0c <TIM_Base_SetConfig+0x128>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d00b      	beq.n	8001c6e <TIM_Base_SetConfig+0x8a>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a2d      	ldr	r2, [pc, #180]	@ (8001d10 <TIM_Base_SetConfig+0x12c>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d007      	beq.n	8001c6e <TIM_Base_SetConfig+0x8a>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a2c      	ldr	r2, [pc, #176]	@ (8001d14 <TIM_Base_SetConfig+0x130>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d003      	beq.n	8001c6e <TIM_Base_SetConfig+0x8a>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a2b      	ldr	r2, [pc, #172]	@ (8001d18 <TIM_Base_SetConfig+0x134>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d108      	bne.n	8001c80 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a16      	ldr	r2, [pc, #88]	@ (8001d00 <TIM_Base_SetConfig+0x11c>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d00f      	beq.n	8001ccc <TIM_Base_SetConfig+0xe8>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a17      	ldr	r2, [pc, #92]	@ (8001d0c <TIM_Base_SetConfig+0x128>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d00b      	beq.n	8001ccc <TIM_Base_SetConfig+0xe8>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a16      	ldr	r2, [pc, #88]	@ (8001d10 <TIM_Base_SetConfig+0x12c>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d007      	beq.n	8001ccc <TIM_Base_SetConfig+0xe8>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a15      	ldr	r2, [pc, #84]	@ (8001d14 <TIM_Base_SetConfig+0x130>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d003      	beq.n	8001ccc <TIM_Base_SetConfig+0xe8>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a14      	ldr	r2, [pc, #80]	@ (8001d18 <TIM_Base_SetConfig+0x134>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d103      	bne.n	8001cd4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	691a      	ldr	r2, [r3, #16]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d105      	bne.n	8001cf2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	f023 0201 	bic.w	r2, r3, #1
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	611a      	str	r2, [r3, #16]
  }
}
 8001cf2:	bf00      	nop
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	40012c00 	.word	0x40012c00
 8001d04:	40000400 	.word	0x40000400
 8001d08:	40000800 	.word	0x40000800
 8001d0c:	40013400 	.word	0x40013400
 8001d10:	40014000 	.word	0x40014000
 8001d14:	40014400 	.word	0x40014400
 8001d18:	40014800 	.word	0x40014800

08001d1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b087      	sub	sp, #28
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	f023 0201 	bic.w	r2, r3, #1
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f023 0303 	bic.w	r3, r3, #3
 8001d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f023 0302 	bic.w	r3, r3, #2
 8001d68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	697a      	ldr	r2, [r7, #20]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a2c      	ldr	r2, [pc, #176]	@ (8001e28 <TIM_OC1_SetConfig+0x10c>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d00f      	beq.n	8001d9c <TIM_OC1_SetConfig+0x80>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a2b      	ldr	r2, [pc, #172]	@ (8001e2c <TIM_OC1_SetConfig+0x110>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d00b      	beq.n	8001d9c <TIM_OC1_SetConfig+0x80>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a2a      	ldr	r2, [pc, #168]	@ (8001e30 <TIM_OC1_SetConfig+0x114>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d007      	beq.n	8001d9c <TIM_OC1_SetConfig+0x80>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a29      	ldr	r2, [pc, #164]	@ (8001e34 <TIM_OC1_SetConfig+0x118>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d003      	beq.n	8001d9c <TIM_OC1_SetConfig+0x80>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a28      	ldr	r2, [pc, #160]	@ (8001e38 <TIM_OC1_SetConfig+0x11c>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d10c      	bne.n	8001db6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	f023 0308 	bic.w	r3, r3, #8
 8001da2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	f023 0304 	bic.w	r3, r3, #4
 8001db4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a1b      	ldr	r2, [pc, #108]	@ (8001e28 <TIM_OC1_SetConfig+0x10c>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d00f      	beq.n	8001dde <TIM_OC1_SetConfig+0xc2>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a1a      	ldr	r2, [pc, #104]	@ (8001e2c <TIM_OC1_SetConfig+0x110>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d00b      	beq.n	8001dde <TIM_OC1_SetConfig+0xc2>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a19      	ldr	r2, [pc, #100]	@ (8001e30 <TIM_OC1_SetConfig+0x114>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d007      	beq.n	8001dde <TIM_OC1_SetConfig+0xc2>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a18      	ldr	r2, [pc, #96]	@ (8001e34 <TIM_OC1_SetConfig+0x118>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d003      	beq.n	8001dde <TIM_OC1_SetConfig+0xc2>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a17      	ldr	r2, [pc, #92]	@ (8001e38 <TIM_OC1_SetConfig+0x11c>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d111      	bne.n	8001e02 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001de4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001dec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	621a      	str	r2, [r3, #32]
}
 8001e1c:	bf00      	nop
 8001e1e:	371c      	adds	r7, #28
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	40012c00 	.word	0x40012c00
 8001e2c:	40013400 	.word	0x40013400
 8001e30:	40014000 	.word	0x40014000
 8001e34:	40014400 	.word	0x40014400
 8001e38:	40014800 	.word	0x40014800

08001e3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b087      	sub	sp, #28
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a1b      	ldr	r3, [r3, #32]
 8001e4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	f023 0210 	bic.w	r2, r3, #16
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	021b      	lsls	r3, r3, #8
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	f023 0320 	bic.w	r3, r3, #32
 8001e8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	011b      	lsls	r3, r3, #4
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a28      	ldr	r2, [pc, #160]	@ (8001f3c <TIM_OC2_SetConfig+0x100>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d003      	beq.n	8001ea8 <TIM_OC2_SetConfig+0x6c>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a27      	ldr	r2, [pc, #156]	@ (8001f40 <TIM_OC2_SetConfig+0x104>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d10d      	bne.n	8001ec4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001eae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	011b      	lsls	r3, r3, #4
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001ec2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a1d      	ldr	r2, [pc, #116]	@ (8001f3c <TIM_OC2_SetConfig+0x100>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d00f      	beq.n	8001eec <TIM_OC2_SetConfig+0xb0>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a1c      	ldr	r2, [pc, #112]	@ (8001f40 <TIM_OC2_SetConfig+0x104>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d00b      	beq.n	8001eec <TIM_OC2_SetConfig+0xb0>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a1b      	ldr	r2, [pc, #108]	@ (8001f44 <TIM_OC2_SetConfig+0x108>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d007      	beq.n	8001eec <TIM_OC2_SetConfig+0xb0>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a1a      	ldr	r2, [pc, #104]	@ (8001f48 <TIM_OC2_SetConfig+0x10c>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d003      	beq.n	8001eec <TIM_OC2_SetConfig+0xb0>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a19      	ldr	r2, [pc, #100]	@ (8001f4c <TIM_OC2_SetConfig+0x110>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d113      	bne.n	8001f14 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001ef2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001efa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	695b      	ldr	r3, [r3, #20]
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	621a      	str	r2, [r3, #32]
}
 8001f2e:	bf00      	nop
 8001f30:	371c      	adds	r7, #28
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	40012c00 	.word	0x40012c00
 8001f40:	40013400 	.word	0x40013400
 8001f44:	40014000 	.word	0x40014000
 8001f48:	40014400 	.word	0x40014400
 8001f4c:	40014800 	.word	0x40014800

08001f50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b087      	sub	sp, #28
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
 8001f5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f023 0303 	bic.w	r3, r3, #3
 8001f8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001f9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	021b      	lsls	r3, r3, #8
 8001fa4:	697a      	ldr	r2, [r7, #20]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a27      	ldr	r2, [pc, #156]	@ (800204c <TIM_OC3_SetConfig+0xfc>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d003      	beq.n	8001fba <TIM_OC3_SetConfig+0x6a>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a26      	ldr	r2, [pc, #152]	@ (8002050 <TIM_OC3_SetConfig+0x100>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d10d      	bne.n	8001fd6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001fc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	021b      	lsls	r3, r3, #8
 8001fc8:	697a      	ldr	r2, [r7, #20]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001fd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a1c      	ldr	r2, [pc, #112]	@ (800204c <TIM_OC3_SetConfig+0xfc>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d00f      	beq.n	8001ffe <TIM_OC3_SetConfig+0xae>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a1b      	ldr	r2, [pc, #108]	@ (8002050 <TIM_OC3_SetConfig+0x100>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d00b      	beq.n	8001ffe <TIM_OC3_SetConfig+0xae>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a1a      	ldr	r2, [pc, #104]	@ (8002054 <TIM_OC3_SetConfig+0x104>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d007      	beq.n	8001ffe <TIM_OC3_SetConfig+0xae>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a19      	ldr	r2, [pc, #100]	@ (8002058 <TIM_OC3_SetConfig+0x108>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d003      	beq.n	8001ffe <TIM_OC3_SetConfig+0xae>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a18      	ldr	r2, [pc, #96]	@ (800205c <TIM_OC3_SetConfig+0x10c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d113      	bne.n	8002026 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002004:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800200c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	011b      	lsls	r3, r3, #4
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	4313      	orrs	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	011b      	lsls	r3, r3, #4
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	4313      	orrs	r3, r2
 8002024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685a      	ldr	r2, [r3, #4]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	621a      	str	r2, [r3, #32]
}
 8002040:	bf00      	nop
 8002042:	371c      	adds	r7, #28
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	40012c00 	.word	0x40012c00
 8002050:	40013400 	.word	0x40013400
 8002054:	40014000 	.word	0x40014000
 8002058:	40014400 	.word	0x40014400
 800205c:	40014800 	.word	0x40014800

08002060 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002060:	b480      	push	{r7}
 8002062:	b087      	sub	sp, #28
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800208e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800209a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	021b      	lsls	r3, r3, #8
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80020ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	031b      	lsls	r3, r3, #12
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a28      	ldr	r2, [pc, #160]	@ (8002160 <TIM_OC4_SetConfig+0x100>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d003      	beq.n	80020cc <TIM_OC4_SetConfig+0x6c>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a27      	ldr	r2, [pc, #156]	@ (8002164 <TIM_OC4_SetConfig+0x104>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d10d      	bne.n	80020e8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80020d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	031b      	lsls	r3, r3, #12
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	4313      	orrs	r3, r2
 80020de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80020e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a1d      	ldr	r2, [pc, #116]	@ (8002160 <TIM_OC4_SetConfig+0x100>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d00f      	beq.n	8002110 <TIM_OC4_SetConfig+0xb0>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a1c      	ldr	r2, [pc, #112]	@ (8002164 <TIM_OC4_SetConfig+0x104>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d00b      	beq.n	8002110 <TIM_OC4_SetConfig+0xb0>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a1b      	ldr	r2, [pc, #108]	@ (8002168 <TIM_OC4_SetConfig+0x108>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d007      	beq.n	8002110 <TIM_OC4_SetConfig+0xb0>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a1a      	ldr	r2, [pc, #104]	@ (800216c <TIM_OC4_SetConfig+0x10c>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d003      	beq.n	8002110 <TIM_OC4_SetConfig+0xb0>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a19      	ldr	r2, [pc, #100]	@ (8002170 <TIM_OC4_SetConfig+0x110>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d113      	bne.n	8002138 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002116:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800211e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	695b      	ldr	r3, [r3, #20]
 8002124:	019b      	lsls	r3, r3, #6
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	4313      	orrs	r3, r2
 800212a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	019b      	lsls	r3, r3, #6
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	4313      	orrs	r3, r2
 8002136:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	697a      	ldr	r2, [r7, #20]
 8002150:	621a      	str	r2, [r3, #32]
}
 8002152:	bf00      	nop
 8002154:	371c      	adds	r7, #28
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	40012c00 	.word	0x40012c00
 8002164:	40013400 	.word	0x40013400
 8002168:	40014000 	.word	0x40014000
 800216c:	40014400 	.word	0x40014400
 8002170:	40014800 	.word	0x40014800

08002174 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002174:	b480      	push	{r7}
 8002176:	b087      	sub	sp, #28
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800219a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80021b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	041b      	lsls	r3, r3, #16
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a17      	ldr	r2, [pc, #92]	@ (8002228 <TIM_OC5_SetConfig+0xb4>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d00f      	beq.n	80021ee <TIM_OC5_SetConfig+0x7a>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a16      	ldr	r2, [pc, #88]	@ (800222c <TIM_OC5_SetConfig+0xb8>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d00b      	beq.n	80021ee <TIM_OC5_SetConfig+0x7a>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a15      	ldr	r2, [pc, #84]	@ (8002230 <TIM_OC5_SetConfig+0xbc>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d007      	beq.n	80021ee <TIM_OC5_SetConfig+0x7a>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a14      	ldr	r2, [pc, #80]	@ (8002234 <TIM_OC5_SetConfig+0xc0>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d003      	beq.n	80021ee <TIM_OC5_SetConfig+0x7a>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a13      	ldr	r2, [pc, #76]	@ (8002238 <TIM_OC5_SetConfig+0xc4>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d109      	bne.n	8002202 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	021b      	lsls	r3, r3, #8
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	4313      	orrs	r3, r2
 8002200:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	621a      	str	r2, [r3, #32]
}
 800221c:	bf00      	nop
 800221e:	371c      	adds	r7, #28
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	40012c00 	.word	0x40012c00
 800222c:	40013400 	.word	0x40013400
 8002230:	40014000 	.word	0x40014000
 8002234:	40014400 	.word	0x40014400
 8002238:	40014800 	.word	0x40014800

0800223c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800223c:	b480      	push	{r7}
 800223e:	b087      	sub	sp, #28
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800226a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800226e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	021b      	lsls	r3, r3, #8
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	4313      	orrs	r3, r2
 800227a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002282:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	051b      	lsls	r3, r3, #20
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	4313      	orrs	r3, r2
 800228e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a18      	ldr	r2, [pc, #96]	@ (80022f4 <TIM_OC6_SetConfig+0xb8>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d00f      	beq.n	80022b8 <TIM_OC6_SetConfig+0x7c>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a17      	ldr	r2, [pc, #92]	@ (80022f8 <TIM_OC6_SetConfig+0xbc>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d00b      	beq.n	80022b8 <TIM_OC6_SetConfig+0x7c>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a16      	ldr	r2, [pc, #88]	@ (80022fc <TIM_OC6_SetConfig+0xc0>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d007      	beq.n	80022b8 <TIM_OC6_SetConfig+0x7c>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a15      	ldr	r2, [pc, #84]	@ (8002300 <TIM_OC6_SetConfig+0xc4>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d003      	beq.n	80022b8 <TIM_OC6_SetConfig+0x7c>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a14      	ldr	r2, [pc, #80]	@ (8002304 <TIM_OC6_SetConfig+0xc8>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d109      	bne.n	80022cc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	029b      	lsls	r3, r3, #10
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	621a      	str	r2, [r3, #32]
}
 80022e6:	bf00      	nop
 80022e8:	371c      	adds	r7, #28
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	40012c00 	.word	0x40012c00
 80022f8:	40013400 	.word	0x40013400
 80022fc:	40014000 	.word	0x40014000
 8002300:	40014400 	.word	0x40014400
 8002304:	40014800 	.word	0x40014800

08002308 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002308:	b480      	push	{r7}
 800230a:	b087      	sub	sp, #28
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	f003 031f 	and.w	r3, r3, #31
 800231a:	2201      	movs	r2, #1
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6a1a      	ldr	r2, [r3, #32]
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	43db      	mvns	r3, r3
 800232a:	401a      	ands	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6a1a      	ldr	r2, [r3, #32]
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	f003 031f 	and.w	r3, r3, #31
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	fa01 f303 	lsl.w	r3, r1, r3
 8002340:	431a      	orrs	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	621a      	str	r2, [r3, #32]
}
 8002346:	bf00      	nop
 8002348:	371c      	adds	r7, #28
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
	...

08002354 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002364:	2b01      	cmp	r3, #1
 8002366:	d101      	bne.n	800236c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002368:	2302      	movs	r3, #2
 800236a:	e065      	b.n	8002438 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2202      	movs	r2, #2
 8002378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a2c      	ldr	r2, [pc, #176]	@ (8002444 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d004      	beq.n	80023a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a2b      	ldr	r2, [pc, #172]	@ (8002448 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d108      	bne.n	80023b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80023a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80023b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a1b      	ldr	r2, [pc, #108]	@ (8002444 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d018      	beq.n	800240c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023e2:	d013      	beq.n	800240c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a18      	ldr	r2, [pc, #96]	@ (800244c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d00e      	beq.n	800240c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a17      	ldr	r2, [pc, #92]	@ (8002450 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d009      	beq.n	800240c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a12      	ldr	r2, [pc, #72]	@ (8002448 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d004      	beq.n	800240c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a13      	ldr	r2, [pc, #76]	@ (8002454 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d10c      	bne.n	8002426 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002412:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	68ba      	ldr	r2, [r7, #8]
 800241a:	4313      	orrs	r3, r2
 800241c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3714      	adds	r7, #20
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	40012c00 	.word	0x40012c00
 8002448:	40013400 	.word	0x40013400
 800244c:	40000400 	.word	0x40000400
 8002450:	40000800 	.word	0x40000800
 8002454:	40014000 	.word	0x40014000

08002458 <memset>:
 8002458:	4402      	add	r2, r0
 800245a:	4603      	mov	r3, r0
 800245c:	4293      	cmp	r3, r2
 800245e:	d100      	bne.n	8002462 <memset+0xa>
 8002460:	4770      	bx	lr
 8002462:	f803 1b01 	strb.w	r1, [r3], #1
 8002466:	e7f9      	b.n	800245c <memset+0x4>

08002468 <__libc_init_array>:
 8002468:	b570      	push	{r4, r5, r6, lr}
 800246a:	4d0d      	ldr	r5, [pc, #52]	@ (80024a0 <__libc_init_array+0x38>)
 800246c:	4c0d      	ldr	r4, [pc, #52]	@ (80024a4 <__libc_init_array+0x3c>)
 800246e:	1b64      	subs	r4, r4, r5
 8002470:	10a4      	asrs	r4, r4, #2
 8002472:	2600      	movs	r6, #0
 8002474:	42a6      	cmp	r6, r4
 8002476:	d109      	bne.n	800248c <__libc_init_array+0x24>
 8002478:	4d0b      	ldr	r5, [pc, #44]	@ (80024a8 <__libc_init_array+0x40>)
 800247a:	4c0c      	ldr	r4, [pc, #48]	@ (80024ac <__libc_init_array+0x44>)
 800247c:	f000 f818 	bl	80024b0 <_init>
 8002480:	1b64      	subs	r4, r4, r5
 8002482:	10a4      	asrs	r4, r4, #2
 8002484:	2600      	movs	r6, #0
 8002486:	42a6      	cmp	r6, r4
 8002488:	d105      	bne.n	8002496 <__libc_init_array+0x2e>
 800248a:	bd70      	pop	{r4, r5, r6, pc}
 800248c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002490:	4798      	blx	r3
 8002492:	3601      	adds	r6, #1
 8002494:	e7ee      	b.n	8002474 <__libc_init_array+0xc>
 8002496:	f855 3b04 	ldr.w	r3, [r5], #4
 800249a:	4798      	blx	r3
 800249c:	3601      	adds	r6, #1
 800249e:	e7f2      	b.n	8002486 <__libc_init_array+0x1e>
 80024a0:	080024d8 	.word	0x080024d8
 80024a4:	080024d8 	.word	0x080024d8
 80024a8:	080024d8 	.word	0x080024d8
 80024ac:	080024dc 	.word	0x080024dc

080024b0 <_init>:
 80024b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024b2:	bf00      	nop
 80024b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024b6:	bc08      	pop	{r3}
 80024b8:	469e      	mov	lr, r3
 80024ba:	4770      	bx	lr

080024bc <_fini>:
 80024bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024be:	bf00      	nop
 80024c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024c2:	bc08      	pop	{r3}
 80024c4:	469e      	mov	lr, r3
 80024c6:	4770      	bx	lr
